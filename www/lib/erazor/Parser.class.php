<?php

// Generated by Haxe 3.3.0
class erazor_Parser {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("erazor.Parser::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->condMatch = new EReg("^@(?:if|for|while)\\b", "");
		$this->inConditionalMatch = new EReg("^(?:\\}[\\s\x0D\x0A]*else if\\b|\\}[\\s\x0D\x0A]*else[\\s\x0D\x0A]*\\{)", "");
		$this->variableChar = new EReg("^[_\\w\\.]\$", "");
		$GLOBALS['%s']->pop();
	}}
	public $condMatch;
	public $inConditionalMatch;
	public $variableChar;
	public $context;
	public $bracketStack;
	public $conditionalStack;
	public $pos;
	public function parseScriptPart($template, $startBrace, $endBrace) {
		$GLOBALS['%s']->push("erazor.Parser::parseScriptPart");
		$__hx__spos = $GLOBALS['%s']->length;
		$insideSingleQuote = false;
		$insideDoubleQuote = false;
		$stack = null;
		if($startBrace === "") {
			$stack = 1;
		} else {
			$stack = 0;
		}
		$i = -1;
		while(true) {
			$tmp = ++$i;
			if(!($tmp < strlen($template))) {
				break;
			}
			$char = _hx_char_at($template, $i);
			$tmp1 = null;
			if(!$insideDoubleQuote) {
				$tmp1 = !$insideSingleQuote;
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				if($char === $startBrace) {
					++$stack;
				} else {
					if($char === $endBrace) {
						--$stack;
						if($stack === 0) {
							$tmp2 = _hx_substr($template, 0, $i + 1);
							$GLOBALS['%s']->pop();
							return $tmp2;
							unset($tmp2);
						}
						if($stack < 0) {
							$tmp2 = $this->pos;
							$tmp3 = _hx_substr($template, 0, 100);
							throw new HException(new erazor_error_ParserError("Unbalanced braces for block: ", $tmp2, $tmp3));
							unset($tmp3,$tmp2);
						}
					} else {
						if($char === "\"") {
							$insideDoubleQuote = true;
						} else {
							if($char === "'") {
								$insideSingleQuote = true;
							}
						}
					}
				}
			} else {
				$tmp4 = null;
				$tmp5 = null;
				if($insideDoubleQuote) {
					$tmp5 = $char === "\"";
				} else {
					$tmp5 = false;
				}
				if($tmp5) {
					$tmp6 = _hx_char_at($template, $i - 1);
					$tmp4 = $tmp6 !== "\\";
					unset($tmp6);
				} else {
					$tmp4 = false;
				}
				if($tmp4) {
					$insideDoubleQuote = false;
				} else {
					$tmp7 = null;
					$tmp8 = null;
					if($insideSingleQuote) {
						$tmp8 = $char === "'";
					} else {
						$tmp8 = false;
					}
					if($tmp8) {
						$tmp9 = _hx_char_at($template, $i - 1);
						$tmp7 = $tmp9 !== "\\";
						unset($tmp9);
					} else {
						$tmp7 = false;
					}
					if($tmp7) {
						$insideSingleQuote = false;
					}
					unset($tmp8,$tmp7);
				}
				unset($tmp5,$tmp4);
			}
			unset($tmp1,$tmp,$char);
		}
		$tmp10 = $this->pos;
		$tmp11 = _hx_substr($template, 0, 100);
		throw new HException(new erazor_error_ParserError("Failed to find a closing delimiter for the script block: ", $tmp10, $tmp11));
		$GLOBALS['%s']->pop();
	}
	public function parseContext($template) {
		$GLOBALS['%s']->push("erazor.Parser::parseContext");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = $this->peek($template, null);
		if($tmp1 === "@") {
			$tmp2 = $this->peek($template, 1);
			$tmp = $tmp2 !== "@";
		} else {
			$tmp = false;
		}
		if($tmp) {
			$tmp2 = erazor__Parser_ParseContext::$code;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$tmp3 = null;
		$tmp4 = $this->conditionalStack > 0;
		if($tmp4) {
			$tmp5 = $this->peek($template, null);
			$tmp3 = $tmp5 === "}";
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			if(_hx_array_get($this->bracketStack, $this->bracketStack->length - 1)->index === 1) {
				$tmp2 = erazor__Parser_ParseContext::$code;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}
		{
			$tmp2 = erazor__Parser_ParseContext::$literal;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function accept($template, $acceptor, $throwAtEnd) {
		$GLOBALS['%s']->push("erazor.Parser::accept");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->parseString($template, array(new _hx_lambda(array(&$acceptor), "erazor_Parser_0"), 'execute'), $throwAtEnd);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function isIdentifier($char, $first = null) {
		$GLOBALS['%s']->push("erazor.Parser::isIdentifier");
		$__hx__spos = $GLOBALS['%s']->length;
		if($first === null) {
			$first = true;
		}
		if($first) {
			$tmp = null;
			$tmp1 = null;
			if((strcmp($char, "a")>= 0)) {
				$tmp1 = (strcmp($char, "z")<= 0);
			} else {
				$tmp1 = false;
			}
			if(!$tmp1) {
				if((strcmp($char, "A")>= 0)) {
					$tmp = (strcmp($char, "Z")<= 0);
				} else {
					$tmp = false;
				}
			} else {
				$tmp = true;
			}
			if(!$tmp) {
				$tmp2 = $char === "_";
				$GLOBALS['%s']->pop();
				return $tmp2;
			} else {
				$GLOBALS['%s']->pop();
				return true;
			}
		} else {
			$tmp2 = null;
			$tmp3 = null;
			$tmp4 = null;
			if((strcmp($char, "a")>= 0)) {
				$tmp4 = (strcmp($char, "z")<= 0);
			} else {
				$tmp4 = false;
			}
			if(!$tmp4) {
				if((strcmp($char, "A")>= 0)) {
					$tmp3 = (strcmp($char, "Z")<= 0);
				} else {
					$tmp3 = false;
				}
			} else {
				$tmp3 = true;
			}
			if(!$tmp3) {
				if((strcmp($char, "0")>= 0)) {
					$tmp2 = (strcmp($char, "9")<= 0);
				} else {
					$tmp2 = false;
				}
			} else {
				$tmp2 = true;
			}
			if(!$tmp2) {
				$tmp = $char === "_";
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$GLOBALS['%s']->pop();
				return true;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function acceptIdentifier($template) {
		$GLOBALS['%s']->push("erazor.Parser::acceptIdentifier");
		$__hx__spos = $GLOBALS['%s']->length;
		$first = true;
		$self = $this;
		{
			$tmp = $this->accept($template, array(new _hx_lambda(array(&$first, &$self), "erazor_Parser_1"), 'execute'), false);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function acceptBracket($template, $bracket) {
		$GLOBALS['%s']->push("erazor.Parser::acceptBracket");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if($bracket === "(") {
			$tmp = ")";
		} else {
			$tmp = "]";
		}
		{
			$tmp2 = $this->parseScriptPart($template, $bracket, $tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseBlock($template) {
		$GLOBALS['%s']->push("erazor.Parser::parseBlock");
		$__hx__spos = $GLOBALS['%s']->length;
		if((is_object($_t = $this->context) && ($_t instanceof Enum) ? $_t == erazor__Parser_ParseContext::$code : _hx_equal($_t, erazor__Parser_ParseContext::$code))) {
			$tmp = $this->parseCodeBlock($template);
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$tmp = $this->parseLiteral($template);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseConditional($template) {
		$GLOBALS['%s']->push("erazor.Parser::parseConditional");
		$__hx__spos = $GLOBALS['%s']->length;
		$str = $this->parseScriptPart($template, "", "{");
		$tmp = _hx_substr($str, 1, null);
		$tmp1 = erazor_TBlock::codeBlock($tmp);
		{
			$tmp2 = _hx_anonymous(array("block" => $tmp1, "length" => strlen($str), "start" => $this->pos));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function peek($template, $offset = null) {
		$GLOBALS['%s']->push("erazor.Parser::peek");
		$__hx__spos = $GLOBALS['%s']->length;
		if($offset === null) {
			$offset = 0;
		}
		$tmp = strlen($template) > $offset;
		if($tmp) {
			$tmp2 = _hx_char_at($template, $offset);
			$GLOBALS['%s']->pop();
			return $tmp2;
		} else {
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseVariable($template) {
		$GLOBALS['%s']->push("erazor.Parser::parseVariable");
		$__hx__spos = $GLOBALS['%s']->length;
		$output = "";
		$char = null;
		$part = null;
		$template = _hx_substr($template, 1, null);
		while(true) {
			$part = $this->acceptIdentifier($template);
			$template = _hx_substr($template, strlen($part), null);
			$output .= _hx_string_or_null($part);
			$char = $this->peek($template, null);
			while(true) {
				$tmp = null;
				if($char !== "(") {
					$tmp = $char === "[";
				} else {
					$tmp = true;
				}
				if(!$tmp) {
					break;
				}
				$part = $this->acceptBracket($template, $char);
				$template = _hx_substr($template, strlen($part), null);
				$output .= _hx_string_or_null($part);
				$char = $this->peek($template, null);
				unset($tmp);
			}
			$tmp1 = null;
			if($char === ".") {
				$tmp2 = $this->peek($template, 1);
				$tmp1 = $this->isIdentifier($tmp2, null);
				unset($tmp2);
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$template = _hx_substr($template, 1, null);
				$output .= ".";
			} else {
				break;
			}
			if(!($char !== null)) {
				break;
			}
			unset($tmp1);
		}
		$tmp3 = erazor_TBlock::printBlock($output);
		{
			$tmp = _hx_anonymous(array("block" => $tmp3, "length" => strlen($output) + 1, "start" => $this->pos));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseVariableChar($char) {
		$GLOBALS['%s']->push("erazor.Parser::parseVariableChar");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $this->variableChar->match($char);
		if($tmp) {
			$tmp2 = erazor__Parser_ParseResult::$keepGoing;
			$GLOBALS['%s']->pop();
			return $tmp2;
		} else {
			$tmp2 = erazor__Parser_ParseResult::$doneSkipCurrent;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseCodeBlock($template) {
		$GLOBALS['%s']->push("erazor.Parser::parseCodeBlock");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = $this->bracketStack->length > 0;
		if($tmp1) {
			$tmp2 = $this->peek($template, null);
			$tmp = $tmp2 === "}";
		} else {
			$tmp = false;
		}
		if($tmp) {
			$tmp3 = $this->inConditionalMatch->match($template);
			if($tmp3) {
				$str = $this->parseScriptPart($template, "", "{");
				$tmp4 = erazor_TBlock::codeBlock($str);
				{
					$tmp2 = _hx_anonymous(array("block" => $tmp4, "length" => strlen($str), "start" => $this->pos));
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}
			$tmp5 = null;
			$_g = $this->bracketStack->pop();
			if($_g === null) {
				$tmp5 = true;
			} else {
				$tmp6 = $_g->index === 1;
				if($tmp6) {
					$tmp5 = --$this->conditionalStack < 0;
				} else {
					$tmp5 = true;
				}
			}
			if($tmp5) {
				throw new HException(new erazor_error_ParserError(erazor_Parser::$bracketMismatch, $this->pos, null));
			}
			$tmp7 = erazor_TBlock::codeBlock("}");
			{
				$tmp2 = _hx_anonymous(array("block" => $tmp7, "length" => 1, "start" => $this->pos));
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}
		$tmp8 = $this->condMatch->match($template);
		if($tmp8) {
			$this->bracketStack->push(erazor__Parser_ParseContext::$code);
			++$this->conditionalStack;
			{
				$tmp2 = $this->parseConditional($template);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}
		$tmp9 = null;
		$tmp10 = $this->peek($template, null);
		if($tmp10 === "@") {
			$tmp11 = $this->peek($template, 1);
			$tmp9 = $this->isIdentifier($tmp11, null);
		} else {
			$tmp9 = false;
		}
		if($tmp9) {
			$tmp2 = $this->parseVariable($template);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$startBrace = $this->peek($template, 1);
		$endBrace = null;
		if($startBrace === "{") {
			$endBrace = "}";
		} else {
			$endBrace = ")";
		}
		$tmp12 = _hx_substr($template, 1, null);
		$str1 = $this->parseScriptPart($tmp12, $startBrace, $endBrace);
		$tmp13 = strlen($str1) - 2;
		$s = _hx_substr($str1, 1, $tmp13);
		$noBraces = trim($s);
		if($startBrace === "{") {
			$tmp14 = erazor_TBlock::codeBlock($noBraces);
			{
				$tmp2 = _hx_anonymous(array("block" => $tmp14, "length" => strlen($str1) + 1, "start" => $this->pos));
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		} else {
			$tmp15 = erazor_TBlock::printBlock($noBraces);
			{
				$tmp2 = _hx_anonymous(array("block" => $tmp15, "length" => strlen($str1) + 1, "start" => $this->pos));
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function parseString($str, $modifier, $throwAtEnd) {
		$GLOBALS['%s']->push("erazor.Parser::parseString");
		$__hx__spos = $GLOBALS['%s']->length;
		$insideSingleQuote = false;
		$insideDoubleQuote = false;
		$i = -1;
		while(true) {
			$tmp = ++$i;
			if(!($tmp < strlen($str))) {
				break;
			}
			$char = _hx_char_at($str, $i);
			$tmp1 = null;
			if(!$insideDoubleQuote) {
				$tmp1 = !$insideSingleQuote;
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				{
					$_g = call_user_func_array($modifier, array($char));
					$tmp2 = $_g->index;
					switch($tmp2) {
					case 0:{}break;
					case 1:{
						$tmp3 = _hx_substr($str, 0, $i + 1);
						$GLOBALS['%s']->pop();
						return $tmp3;
					}break;
					case 2:{
						$tmp3 = _hx_substr($str, 0, $i);
						$GLOBALS['%s']->pop();
						return $tmp3;
					}break;
					}
					unset($tmp2,$_g);
				}
				if($char === "\"") {
					$insideDoubleQuote = true;
				} else {
					if($char === "'") {
						$insideSingleQuote = true;
					}
				}
			} else {
				$tmp3 = null;
				$tmp4 = null;
				if($insideDoubleQuote) {
					$tmp4 = $char === "\"";
				} else {
					$tmp4 = false;
				}
				if($tmp4) {
					$tmp5 = _hx_char_at($str, $i - 1);
					$tmp3 = $tmp5 !== "\\";
					unset($tmp5);
				} else {
					$tmp3 = false;
				}
				if($tmp3) {
					$insideDoubleQuote = false;
				} else {
					$tmp6 = null;
					$tmp7 = null;
					if($insideSingleQuote) {
						$tmp7 = $char === "'";
					} else {
						$tmp7 = false;
					}
					if($tmp7) {
						$tmp8 = _hx_char_at($str, $i - 1);
						$tmp6 = $tmp8 !== "\\";
						unset($tmp8);
					} else {
						$tmp6 = false;
					}
					if($tmp6) {
						$insideSingleQuote = false;
					}
					unset($tmp7,$tmp6);
				}
				unset($tmp4,$tmp3);
			}
			unset($tmp1,$tmp,$char);
		}
		if($throwAtEnd) {
			$tmp9 = $this->pos;
			$tmp10 = _hx_substr($str, 0, 100);
			throw new HException(new erazor_error_ParserError("Failed to find a closing delimiter: ", $tmp9, $tmp10));
		}
		{
			$GLOBALS['%s']->pop();
			return $str;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseLiteral($template) {
		$GLOBALS['%s']->push("erazor.Parser::parseLiteral");
		$__hx__spos = $GLOBALS['%s']->length;
		$len = strlen($template);
		$i = -1;
		while(true) {
			$tmp = ++$i;
			if(!($tmp < $len)) {
				break;
			}
			$char = _hx_char_at($template, $i);
			switch($char) {
			case "@":{
				$tmp1 = null;
				if($len > $i + 1) {
					$tmp2 = _hx_char_at($template, $i + 1);
					$tmp1 = $tmp2 !== "@";
				} else {
					$tmp1 = false;
				}
				if($tmp1) {
					$tmp3 = _hx_substr($template, 0, $i);
					$tmp4 = $this->escapeLiteral($tmp3);
					$tmp5 = erazor_TBlock::literal($tmp4);
					{
						$tmp2 = _hx_anonymous(array("block" => $tmp5, "length" => $i, "start" => $this->pos));
						$GLOBALS['%s']->pop();
						return $tmp2;
					}
				}
				++$i;
			}break;
			case "{":{
				$this->bracketStack->push(erazor__Parser_ParseContext::$literal);
			}break;
			case "}":{
				$tmp6 = $this->bracketStack->length > 0;
				if($tmp6) {
					$tmp7 = _hx_array_get($this->bracketStack, $this->bracketStack->length - 1)->index;
					switch($tmp7) {
					case 0:{
						$this->bracketStack->pop();
					}break;
					case 1:{
						$tmp8 = _hx_substr($template, 0, $i);
						$tmp9 = $this->escapeLiteral($tmp8);
						$tmp10 = erazor_TBlock::literal($tmp9);
						{
							$tmp2 = _hx_anonymous(array("block" => $tmp10, "length" => $i, "start" => $this->pos));
							$GLOBALS['%s']->pop();
							return $tmp2;
						}
					}break;
					}
				} else {
					throw new HException(new erazor_error_ParserError(erazor_Parser::$bracketMismatch, $this->pos, null));
				}
			}break;
			}
			unset($tmp,$char);
		}
		$tmp11 = $this->escapeLiteral($template);
		$tmp12 = erazor_TBlock::literal($tmp11);
		{
			$tmp = _hx_anonymous(array("block" => $tmp12, "length" => $len, "start" => $this->pos));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function escapeLiteral($input) {
		$GLOBALS['%s']->push("erazor.Parser::escapeLiteral");
		$__hx__spos = $GLOBALS['%s']->length;
		$sub = "@" . "@";
		if($sub === "") {
			$tmp = implode(str_split ($input), "@");
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$tmp = str_replace($sub, "@", $input);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parse($template) {
		$GLOBALS['%s']->push("erazor.Parser::parse");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->pos = 0;
		$output = new _hx_array(array());
		$this->bracketStack = (new _hx_array(array()));
		$this->conditionalStack = 0;
		while($template !== "") {
			$this->context = $this->parseContext($template);
			$block = $this->parseBlock($template);
			if($block->block !== null) {
				$output->push($block->block);
			}
			$template = _hx_substr($template, _hx_len($block), null);
			$this->pos += _hx_len($block);
			unset($block);
		}
		if($this->bracketStack->length !== 0) {
			throw new HException(new erazor_error_ParserError(erazor_Parser::$bracketMismatch, $this->pos, null));
		}
		{
			$GLOBALS['%s']->pop();
			return $output;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseWithPosition($template) {
		$GLOBALS['%s']->push("erazor.Parser::parseWithPosition");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->pos = 0;
		$output = new _hx_array(array());
		$this->bracketStack = (new _hx_array(array()));
		$this->conditionalStack = 0;
		while($template !== "") {
			$this->context = $this->parseContext($template);
			$block = $this->parseBlock($template);
			if($block->block !== null) {
				$output->push($block);
			}
			$template = _hx_substr($template, _hx_len($block), null);
			$this->pos += _hx_len($block);
			unset($block);
		}
		if($this->bracketStack->length !== 0) {
			throw new HException(new erazor_error_ParserError(erazor_Parser::$bracketMismatch, $this->pos, null));
		}
		{
			$GLOBALS['%s']->pop();
			return $output;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $at = "@";
	static $bracketMismatch = "Bracket mismatch! Inside template, non-paired brackets, '{' or '}', should be replaced by @{'{'} and @{'}'}.";
	function __toString() { return 'erazor.Parser'; }
}
function erazor_Parser_0(&$acceptor, $chr) {
	{
		$GLOBALS['%s']->push("erazor.Parser::accept@103");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = call_user_func_array($acceptor, array($chr));
		if($tmp) {
			$tmp2 = erazor__Parser_ParseResult::$keepGoing;
			$GLOBALS['%s']->pop();
			return $tmp2;
		} else {
			$tmp2 = erazor__Parser_ParseResult::$doneSkipCurrent;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
}
function erazor_Parser_1(&$first, &$self, $chr) {
	{
		$GLOBALS['%s']->push("erazor.Parser::acceptIdentifier@120");
		$__hx__spos = $GLOBALS['%s']->length;
		$status = $self->isIdentifier($chr, $first);
		$first = false;
		{
			$GLOBALS['%s']->pop();
			return $status;
		}
		$GLOBALS['%s']->pop();
	}
}
