<?php

// Generated by Haxe 3.3.0
class sys_FileSystem {
	public function __construct(){}
	static function exists($path) {
		$GLOBALS['%s']->push("sys.FileSystem::exists");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = file_exists($path);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function rename($path, $newPath) {
		$GLOBALS['%s']->push("sys.FileSystem::rename");
		$__hx__spos = $GLOBALS['%s']->length;
		rename($path, $newPath);
		$GLOBALS['%s']->pop();
	}
	static function stat($path) {
		$GLOBALS['%s']->push("sys.FileSystem::stat");
		$__hx__spos = $GLOBALS['%s']->length;
		$fp = fopen($path, "r"); $fstat = fstat($fp); fclose($fp);;
		$tmp = $fstat['gid'];
		$tmp1 = $fstat['uid'];
		$tmp2 = $fstat['atime'];
		$tmp3 = Date::fromTime($tmp2 * 1000);
		$tmp4 = $fstat['mtime'];
		$tmp5 = Date::fromTime($tmp4 * 1000);
		$tmp6 = $fstat['ctime'];
		$tmp7 = Date::fromTime($tmp6 * 1000);
		$tmp8 = $fstat['dev'];
		$tmp9 = $fstat['ino'];
		$tmp10 = $fstat['nlink'];
		$tmp11 = $fstat['rdev'];
		$tmp12 = $fstat['size'];
		$tmp13 = $fstat['mode'];
		{
			$tmp14 = _hx_anonymous(array("gid" => $tmp, "uid" => $tmp1, "atime" => $tmp3, "mtime" => $tmp5, "ctime" => $tmp7, "dev" => $tmp8, "ino" => $tmp9, "nlink" => $tmp10, "rdev" => $tmp11, "size" => $tmp12, "mode" => $tmp13));
			$GLOBALS['%s']->pop();
			return $tmp14;
		}
		$GLOBALS['%s']->pop();
	}
	static function fullPath($relPath) {
		$GLOBALS['%s']->push("sys.FileSystem::fullPath");
		$__hx__spos = $GLOBALS['%s']->length;
		$p = realpath($relPath);
		$tmp = ($p === false);
		if($tmp) {
			$GLOBALS['%s']->pop();
			return null;
		} else {
			$GLOBALS['%s']->pop();
			return $p;
		}
		$GLOBALS['%s']->pop();
	}
	static function absolutePath($relPath) {
		$GLOBALS['%s']->push("sys.FileSystem::absolutePath");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = haxe_io_Path::isAbsolute($relPath);
		if($tmp) {
			$GLOBALS['%s']->pop();
			return $relPath;
		}
		$tmp1 = Sys::getCwd();
		{
			$tmp2 = haxe_io_Path::join((new _hx_array(array($tmp1, $relPath))));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function kind($path) {
		$GLOBALS['%s']->push("sys.FileSystem::kind");
		$__hx__spos = $GLOBALS['%s']->length;
		$k = filetype($path);
		switch($k) {
		case "dir":{
			$tmp = sys__FileSystem_FileKind::$kdir;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case "file":{
			$tmp = sys__FileSystem_FileKind::$kfile;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		default:{
			$tmp = sys__FileSystem_FileKind::kother($k);
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	static function isDirectory($path) {
		$GLOBALS['%s']->push("sys.FileSystem::isDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = is_dir($path);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function createDirectory($path) {
		$GLOBALS['%s']->push("sys.FileSystem::createDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		$path1 = haxe_io_Path::addTrailingSlash($path);
		$_p = null;
		$parts = (new _hx_array(array()));
		while(true) {
			$_p = haxe_io_Path::directory($path1);
			if(!($path1 !== $_p)) {
				break;
			}
			$parts->unshift($path1);
			$path1 = $_p;
		}
		{
			$_g = 0;
			while($_g < $parts->length) {
				$part = $parts[$_g];
				++$_g;
				$tmp = null;
				$tmp1 = strlen($part) - 1;
				$tmp2 = _hx_char_code_at($part, $tmp1);
				if($tmp2 !== 58) {
					$tmp = !file_exists($part);
				} else {
					$tmp = false;
				}
				if($tmp) {
					@mkdir($part, 493);
				}
				unset($tmp2,$tmp1,$tmp,$part);
			}
		}
		$GLOBALS['%s']->pop();
	}
	static function deleteFile($path) {
		$GLOBALS['%s']->push("sys.FileSystem::deleteFile");
		$__hx__spos = $GLOBALS['%s']->length;
		@unlink($path);
		$GLOBALS['%s']->pop();
	}
	static function deleteDirectory($path) {
		$GLOBALS['%s']->push("sys.FileSystem::deleteDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		@rmdir($path);
		$GLOBALS['%s']->pop();
	}
	static function readDirectory($path) {
		$GLOBALS['%s']->push("sys.FileSystem::readDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		$l = array();
		$dh = opendir($path);
        while (($file = readdir($dh)) !== false) if("." != $file && ".." != $file) $l[] = $file;
        closedir($dh);;
		{
			$tmp = new _hx_array($l);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'sys.FileSystem'; }
}
