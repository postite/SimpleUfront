<?php

// Generated by Haxe 3.3.0
class sys_ufront_web_context__HttpRequest_WebOverride {
	public function __construct(){}
	static function parseMultipart($onPart, $onData) {
		$GLOBALS['%s']->push("sys.ufront.web.context._HttpRequest.WebOverride::parseMultipart");
		$__hx__spos = $GLOBALS['%s']->length;
		$a = $_POST;
		$tmp = get_magic_quotes_gpc();
		if($tmp) {
			reset($a); while(list($k, $v) = each($a)) $a[$k] = stripslashes((string)$v);
		}
		$post = php_Lib::hashOfAssociativeArray($a);
		{
			$tmp1 = $post->keys();
			while(true) {
				$tmp2 = !$tmp1->hasNext();
				if($tmp2) {
					break;
				}
				$key = $tmp1->next();
				call_user_func_array($onPart, array($key, ""));
				$v = $post->get($key);
				$tmp3 = is_array($v);
				if($tmp3) {
					$map = php_Lib::hashOfAssociativeArray($v);
					$first = true;
					{
						$tmp4 = $map->iterator();
						while(true) {
							$tmp5 = !$tmp4->hasNext();
							if($tmp5) {
								break;
							}
							$val = $tmp4->next();
							if(!$first) {
								call_user_func_array($onPart, array($key, ""));
							}
							$tmp6 = haxe_io_Bytes::ofString($val);
							$tmp7 = strlen($val);
							call_user_func_array($onData, array($tmp6, 0, $tmp7));
							$first = false;
							unset($val,$tmp7,$tmp6,$tmp5);
						}
						unset($tmp4);
					}
					unset($map,$first);
				} else {
					$tmp8 = haxe_io_Bytes::ofString($v);
					$tmp9 = strlen($v);
					call_user_func_array($onData, array($tmp8, 0, $tmp9));
					unset($tmp9,$tmp8);
				}
				unset($v,$tmp3,$tmp2,$key);
			}
		}
		$tmp10 = !isset($_FILES);
		if($tmp10) {
			$GLOBALS['%s']->pop();
			return;
		}
		$parts = new _hx_array(array_keys($_FILES));
		{
			$_g = 0;
			while($_g < $parts->length) {
				$part = $parts[$_g];
				++$_g;
				$info = $_FILES[$part];
				$tmp11 = $info["tmp_name"];
				$file = $info["name"];
				$err = $info["error"];
				if($err > 0) {
					switch($err) {
					case 1:{
						$tmp12 = ini_get("upload_max_filesize");
						throw new HException("The uploaded file exceeds the max size of " . _hx_string_or_null($tmp12));
					}break;
					case 2:{
						$tmp13 = ini_get("post_max_size");
						throw new HException("The uploaded file exceeds the max file size directive specified in the HTML form (max is" . _hx_string_or_null((_hx_string_or_null($tmp13) . ")")));
					}break;
					case 3:{
						throw new HException("The uploaded file was only partially uploaded");
					}break;
					case 4:{
						continue 2;
					}break;
					case 6:{
						throw new HException("Missing a temporary folder");
					}break;
					case 7:{
						throw new HException("Failed to write file to disk");
					}break;
					case 8:{
						throw new HException("File upload stopped by extension");
					}break;
					}
				}
				call_user_func_array($onPart, array($part, $file));
				if("" !== $file) {
					$h = fopen($tmp11, "r");
					$bsize = 8192;
					while(true) {
						$tmp14 = !(!feof($h));
						if($tmp14) {
							break;
						}
						$buf = fread($h, $bsize);
						$size = strlen($buf);
						call_user_func_array($onData, array(haxe_io_Bytes::ofString($buf), 0, $size));
						unset($tmp14,$size,$buf);
					}
					fclose($h);
					unset($h,$bsize);
				}
				unset($tmp11,$part,$info,$file,$err);
			}
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'sys.ufront.web.context._HttpRequest.WebOverride'; }
}
