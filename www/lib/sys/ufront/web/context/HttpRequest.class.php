<?php

// Generated by Haxe 3.3.0
class sys_ufront_web_context_HttpRequest extends ufront_web_context_HttpRequest {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->_parsed = false;
		$GLOBALS['%s']->pop();
	}}
	public function get_queryString() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_queryString");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->queryString === null) {
			$this->queryString = php_Web::getParamsString();
			if($this->queryString === null) {
				$this->queryString = "";
			}
			$indexOfHash = _hx_index_of($this->queryString, "#", null);
			if($indexOfHash > -1) {
				$this->queryString = _hx_substring($this->queryString, 0, $indexOfHash);
			}
		}
		{
			$tmp = $this->queryString;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_postString() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_postString");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->postString === null) {
			$tmp = null;
			$tmp1 = $this->get_httpMethod();
			if($tmp1 === "GET") {
				$tmp = "";
			} else {
				$tmp = php_Web::getPostData();
			}
			$this->postString = $tmp;
			if($this->postString === null) {
				$this->postString = "";
			}
		}
		{
			$tmp = $this->postString;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public $_parsed;
	public function parseMultipart($onPart = null, $onData = null, $onEndPart = null) {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = !$this->isMultipart();
		if($tmp) {
			$tmp2 = ufront_core_SurpriseTools::success();
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$tmp1 = $this->_parsed;
		if($tmp1) {
			throw new HException(ufront_web_HttpError::internalServerError("parseMultipart() has been called more than once.", null, _hx_anonymous(array("fileName" => "HttpRequest.hx", "lineNumber" => 90, "className" => "sys.ufront.web.context.HttpRequest", "methodName" => "parseMultipart"))));
		}
		$this->_parsed = true;
		if($onPart === null) {
			$onPart = array(new _hx_lambda(array(), "sys_ufront_web_context_HttpRequest_0"), 'execute');
		}
		if($onData === null) {
			$onData = array(new _hx_lambda(array(), "sys_ufront_web_context_HttpRequest_1"), 'execute');
		}
		if($onEndPart === null) {
			$onEndPart = array(new _hx_lambda(array(), "sys_ufront_web_context_HttpRequest_2"), 'execute');
		}
		$this1 = new haxe_ds_StringMap();
		$this->post = $this1;
		$noParts = true;
		$isFile = false;
		$partName = null;
		$fileName = null;
		$currentContent = null;
		$callbackFutures = (new _hx_array(array()));
		$errors = (new _hx_array(array()));
		$processCallbackResult = array(new _hx_lambda(array(&$callbackFutures, &$errors), "sys_ufront_web_context_HttpRequest_3"), 'execute');
		$doEndOfPart = array(new _hx_lambda(array(&$_gthis, &$currentContent, &$isFile, &$onEndPart, &$partName, &$processCallbackResult), "sys_ufront_web_context_HttpRequest_4"), 'execute');
		$doPart = array(new _hx_lambda(array(&$_gthis, &$currentContent, &$doEndOfPart, &$fileName, &$isFile, &$noParts, &$onPart, &$partName, &$processCallbackResult), "sys_ufront_web_context_HttpRequest_5"), 'execute');
		$doData = array(new _hx_lambda(array(&$currentContent, &$isFile, &$onData, &$processCallbackResult), "sys_ufront_web_context_HttpRequest_6"), 'execute');
		try {
			sys_ufront_web_context__HttpRequest_WebOverride::parseMultipart($doPart, $doData);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp12 = haxe_CallStack::exceptionStack();
				$stack = haxe_CallStack::toString($tmp12);
				$tmp13 = Std::string($e);
				$errors->push("Failed to parse multipart data: " . _hx_string_or_null($tmp13) . "\x0A" . _hx_string_or_null($stack));
			}
		}
		if($noParts === false) {
			call_user_func($doEndOfPart);
		}
		$tmp14 = $callbackFutures->length > 0;
		if($tmp14) {
			$tmp15 = tink_core__Future_Future_Impl_::ofMany($callbackFutures, null);
			{
				$tmp2 = tink_core__Future_Future_Impl_::flatMap($tmp15, array(new _hx_lambda(array(&$errors), "sys_ufront_web_context_HttpRequest_7"), 'execute'), null);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		} else {
			$data5 = tink_core_Outcome::Success(tink_core_Noise::$Noise);
			{
				$tmp2 = tink_core__Future_Future_Impl_::sync($data5);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function get_query() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_query");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->query === null) {
			$tmp = $this->get_queryString();
			$this->query = sys_ufront_web_context_HttpRequest::getMultiValueMapFromString($tmp);
		}
		{
			$tmp = $this->query;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_post() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_post");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->post === null) {
			$tmp = $this->get_httpMethod();
			if($tmp === "GET") {
				$this1 = new haxe_ds_StringMap();
				$this->post = $this1;
			} else {
				$tmp1 = $this->isMultipart();
				if($tmp1) {
					$tmp2 = $this->_parsed === false;
					if($tmp2) {
						$this->parseMultipart(null, null, null);
					}
				} else {
					$tmp3 = $this->get_postString();
					$this->post = sys_ufront_web_context_HttpRequest::getMultiValueMapFromString($tmp3);
				}
			}
		}
		{
			$tmp = $this->post;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_cookies() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_cookies");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->cookies === null) {
			$map = php_Web::getCookies();
			$tmp = ufront_core__MultiValueMap_MultiValueMap_Impl_::fromStringMap($map);
			$this->cookies = $tmp;
		}
		{
			$tmp = $this->cookies;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_hostName() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_hostName");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->hostName === null) {
			$this->hostName = $_SERVER['SERVER_NAME'];
		}
		{
			$tmp = $this->hostName;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_clientIP() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_clientIP");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->clientIP === null) {
			$this->clientIP = $_SERVER['REMOTE_ADDR'];
		}
		{
			$tmp = $this->clientIP;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_uri() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_uri");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->uri === null) {
			$this->uri = php_Web::getURI();
			$this->uri = urldecode($this->uri);
		}
		{
			$tmp = $this->uri;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_clientHeaders() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_clientHeaders");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->clientHeaders === null) {
			$this1 = null;
			$this2 = new haxe_ds_StringMap();
			$this1 = $this2;
			$this->clientHeaders = $this1;
			$tmp = apache_request_headers();
			$headers = php_Lib::hashOfAssociativeArray($tmp);
			{
				$tmp1 = $headers->keys();
				while(true) {
					$tmp2 = !$tmp1->hasNext();
					if($tmp2) {
						break;
					}
					$name = $tmp1->next();
					$_g = 0;
					$_g1 = _hx_explode(",", $headers->get($name));
					while($_g < $_g1->length) {
						$val = $_g1[$_g];
						++$_g;
						{
							$value = trim($val);
							$tmp3 = strtolower($name);
							ufront_core__MultiValueMap_MultiValueMap_Impl_::add($this->clientHeaders, $tmp3, $value);
							unset($value,$tmp3);
						}
						unset($val);
					}
					unset($tmp2,$name,$_g1,$_g);
				}
			}
		}
		{
			$tmp = $this->clientHeaders;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_httpMethod() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_httpMethod");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->httpMethod === null) {
			$this->httpMethod = php_Web::getMethod();
			if($this->httpMethod === null) {
				$this->httpMethod = "";
			}
		}
		{
			$tmp = $this->httpMethod;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_scriptDirectory() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_scriptDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->scriptDirectory === null) {
			$tmp = dirname($_SERVER["SCRIPT_FILENAME"]);
			$this->scriptDirectory = _hx_string_or_null($tmp) . "/";
		}
		{
			$tmp = $this->scriptDirectory;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_authorization() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::get_authorization");
		$__hx__spos = $GLOBALS['%s']->length;
		if(_hx_field($this, "authorization") === null) {
			$this->authorization = php_Web::getAuthorization();
			if(_hx_field($this, "authorization") === null) {
				$this->authorization = _hx_anonymous(array("user" => null, "pass" => null));
			}
		}
		{
			$tmp = $this->authorization;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function getMultiValueMapFromString($s) {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::getMultiValueMapFromString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new haxe_ds_StringMap();
		$map = $this1;
		{
			$_g = 0;
			$_g1 = _hx_explode("&", $s);
			while($_g < $_g1->length) {
				$part = $_g1[$_g];
				++$_g;
				$index = _hx_index_of($part, "=", null);
				if($index > 0) {
					$name = _hx_substr($part, 0, $index);
					$val = _hx_substr($part, $index + 1, null);
					$tmp = urldecode($name);
					$tmp1 = urldecode($val);
					ufront_core__MultiValueMap_MultiValueMap_Impl_::add($map, $tmp, $tmp1);
					unset($val,$tmp1,$tmp,$name);
				}
				unset($part,$index);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $map;
		}
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_authorization" => "get_authorization","get_scriptDirectory" => "get_scriptDirectory","get_httpMethod" => "get_httpMethod","get_userAgent" => "get_userAgent","get_clientHeaders" => "get_clientHeaders","get_uri" => "get_uri","get_clientIP" => "get_clientIP","get_hostName" => "get_hostName","get_cookies" => "get_cookies","get_files" => "get_files","get_post" => "get_post","get_query" => "get_query","get_postString" => "get_postString","get_queryString" => "get_queryString","get_params" => "get_params");
	function __toString() { return 'sys.ufront.web.context.HttpRequest'; }
}
function sys_ufront_web_context_HttpRequest_0($_, $_1) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@95");
		$__hx__spos = $GLOBALS['%s']->length;
		$data = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		{
			$tmp = tink_core__Future_Future_Impl_::sync($data);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_1($_2, $_3, $_4) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@96");
		$__hx__spos = $GLOBALS['%s']->length;
		$data1 = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		{
			$tmp = tink_core__Future_Future_Impl_::sync($data1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_2() {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@97");
		$__hx__spos = $GLOBALS['%s']->length;
		$data2 = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		{
			$tmp = tink_core__Future_Future_Impl_::sync($data2);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_3(&$callbackFutures, &$errors, $surprise) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@109");
		$__hx__spos = $GLOBALS['%s']->length;
		$callbackFutures->push($surprise);
		$surprise(array(new _hx_lambda(array(&$errors), "sys_ufront_web_context_HttpRequest_8"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_4(&$_gthis, &$currentContent, &$isFile, &$onEndPart, &$partName, &$processCallbackResult) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@118");
		$__hx__spos = $GLOBALS['%s']->length;
		if($isFile) {
			$tmp4 = call_user_func($onEndPart);
			call_user_func_array($processCallbackResult, array($tmp4));
		} else {
			if($currentContent !== null) {
				$tmp5 = $_gthis->get_post();
				ufront_core__MultiValueMap_MultiValueMap_Impl_::add($tmp5, $partName, $currentContent);
			}
		}
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_5(&$_gthis, &$currentContent, &$doEndOfPart, &$fileName, &$isFile, &$noParts, &$onPart, &$partName, &$processCallbackResult, $newPartName, $newPartFilename) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@126");
		$__hx__spos = $GLOBALS['%s']->length;
		call_user_func($doEndOfPart);
		$noParts = false;
		$currentContent = null;
		$partName = urldecode($newPartName);
		$isFile = false;
		$tmp6 = null;
		if($newPartFilename !== null) {
			$tmp6 = $newPartFilename !== "";
		} else {
			$tmp6 = false;
		}
		if($tmp6) {
			$fileName = urldecode($newPartFilename);
			$tmp7 = $_gthis->get_post();
			ufront_core__MultiValueMap_MultiValueMap_Impl_::add($tmp7, $partName, $fileName);
			$tmp8 = call_user_func_array($onPart, array($partName, $fileName));
			call_user_func_array($processCallbackResult, array($tmp8));
			$isFile = true;
		}
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_6(&$currentContent, &$isFile, &$onData, &$processCallbackResult, $bytes, $pos, $len) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@139");
		$__hx__spos = $GLOBALS['%s']->length;
		if($isFile) {
			if($len > 0) {
				$tmp9 = call_user_func_array($onData, array($bytes, $pos, $len));
				call_user_func_array($processCallbackResult, array($tmp9));
			}
		} else {
			$tmp10 = $currentContent === null;
			if($tmp10) {
				$currentContent = "";
			}
			$tmp11 = $bytes->getString($pos, $len);
			$currentContent .= _hx_string_or_null($tmp11);
		}
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_7(&$errors, $_5) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::parseMultipart@168");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp16 = $errors->length === 0;
		if($tmp16) {
			$data3 = tink_core_Outcome::Success(tink_core_Noise::$Noise);
			{
				$tmp = tink_core__Future_Future_Impl_::sync($data3);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$tmp17 = tink_core_TypedError::withData(null, "Error parsing multipart request data", $errors, _hx_anonymous(array("fileName" => "HttpRequest.hx", "lineNumber" => 171, "className" => "sys.ufront.web.context.HttpRequest", "methodName" => "parseMultipart")));
			$data4 = tink_core_Outcome::Failure($tmp17);
			{
				$tmp = tink_core__Future_Future_Impl_::sync($data4);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}
		$GLOBALS['%s']->pop();
	}
}
function sys_ufront_web_context_HttpRequest_8(&$errors, $outcome) {
	{
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpRequest::getMultiValueMapFromString@111");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp2 = $outcome->index === 1;
		if($tmp2) {
			$tmp3 = _hx_deref($outcome)->params[0]->toString();
			$errors->push($tmp3);
		}
		$GLOBALS['%s']->pop();
	}
}
