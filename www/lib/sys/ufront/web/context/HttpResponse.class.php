<?php

// Generated by Haxe 3.3.0
class sys_ufront_web_context_HttpResponse extends ufront_web_context_HttpResponse {
	public function __construct() { if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpResponse::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct();
		$GLOBALS['%s']->pop();
	}}
	public function flush() {
		$GLOBALS['%s']->push("sys.ufront.web.context.HttpResponse::flush");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = !$this->_flushedStatus;
		if($tmp) {
			$this->_flushedStatus = true;
			php_Web::setReturnCode($this->status);
		}
		$tmp1 = !$this->_flushedCookies;
		if($tmp1) {
			$this->_flushedCookies = true;
			try {
				$tmp2 = $this->_cookies->iterator();
				while(true) {
					$tmp3 = !$tmp2->hasNext();
					if($tmp3) {
						break;
					}
					$cookie = $tmp2->next();
					php_Web::setCookie($cookie->name, $cookie->value, $cookie->expires, $cookie->domain, $cookie->path, $cookie->secure, $cookie->httpOnly);
					unset($tmp3,$cookie);
				}
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					throw new HException(ufront_web_HttpError::internalServerError("Failed to set cookie on response", $e, _hx_anonymous(array("fileName" => "HttpResponse.hx", "lineNumber" => 34, "className" => "sys.ufront.web.context.HttpResponse", "methodName" => "flush"))));
				}
			}
		}
		$tmp4 = !$this->_flushedHeaders;
		if($tmp4) {
			$this->_flushedHeaders = true;
			{
				$tmp5 = $this->_headers->keys();
				while(true) {
					$tmp6 = !$tmp5->hasNext();
					if($tmp6) {
						break;
					}
					$key = $tmp5->next();
					$val = $this->_headers->get($key);
					$tmp7 = null;
					$tmp8 = null;
					if($key === "Content-type") {
						$tmp8 = null !== $this->charset;
					} else {
						$tmp8 = false;
					}
					if($tmp8) {
						if($val !== "application/json") {
							$tmp7 = StringTools::startsWith($val, "text/");
						} else {
							$tmp7 = true;
						}
					} else {
						$tmp7 = false;
					}
					if($tmp7) {
						$val .= "; charset=" . _hx_string_or_null($this->charset);
					}
					try {
						header(_hx_string_or_null($key) . ": " . _hx_string_or_null($val));
					}catch(Exception $__hx__e) {
						$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
						$e1 = $_ex_;
						{
							$GLOBALS['%e'] = (new _hx_array(array()));
							while($GLOBALS['%s']->length >= $__hx__spos) {
								$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
							}
							$GLOBALS['%s']->push($GLOBALS['%e'][0]);
							throw new HException(ufront_web_HttpError::internalServerError("Invalid header: \"" . _hx_string_or_null($key) . ": " . _hx_string_or_null($val) . "\", or output already sent", $e1, _hx_anonymous(array("fileName" => "HttpResponse.hx", "lineNumber" => 50, "className" => "sys.ufront.web.context.HttpResponse", "methodName" => "flush"))));
						}
					}
					unset($val,$tmp8,$tmp7,$tmp6,$key,$e1);
				}
			}
		}
		$tmp9 = !$this->_flushedContent;
		if($tmp9) {
			$this->_flushedContent = true;
			Sys::hprint($this->_buff->b);
		}
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("set_redirectLocation" => "set_redirectLocation","get_redirectLocation" => "get_redirectLocation","set_contentType" => "set_contentType","get_contentType" => "get_contentType");
	function __toString() { return 'sys.ufront.web.context.HttpResponse'; }
}
