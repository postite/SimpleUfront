<?php

// Generated by Haxe 3.3.0
class haxe_io_Bytes {
	public function __construct($length, $b) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("haxe.io.Bytes::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->length = $length;
		$this->b = $b;
		$GLOBALS['%s']->pop();
	}}
	public $length;
	public $b;
	public function get($pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::get");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ord($this->b->s[$pos]);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function set($pos, $v) {
		$GLOBALS['%s']->push("haxe.io.Bytes::set");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b->s[$pos] = chr($v);
		$GLOBALS['%s']->pop();
	}
	public function blit($pos, $src, $srcpos, $len) {
		$GLOBALS['%s']->push("haxe.io.Bytes::blit");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		$tmp3 = null;
		if($pos >= 0) {
			$tmp3 = $srcpos < 0;
		} else {
			$tmp3 = true;
		}
		if(!$tmp3) {
			$tmp2 = $len < 0;
		} else {
			$tmp2 = true;
		}
		if(!$tmp2) {
			$tmp1 = $pos + $len > $this->length;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $srcpos + $len > $src->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		{
			$this1 = $this->b;
			{
				$val = substr($this1->s, 0, $pos) . substr($src->b->s, $srcpos, $len) . substr($this1->s, $pos+$len);
				$this1->s = $val;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function fill($pos, $len, $value) {
		$GLOBALS['%s']->push("haxe.io.Bytes::fill");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g1 = 0;
		$_g = $len;
		while($_g1 < $_g) {
			$i = $_g1++;
			{
				$pos1 = $pos++;
				$this->b->s[$pos1] = chr($value);
				unset($pos1);
			}
			unset($i);
		}
		$GLOBALS['%s']->pop();
	}
	public function sub($pos, $len) {
		$GLOBALS['%s']->push("haxe.io.Bytes::sub");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $this->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		$s = substr($this->b->s, $pos, $len);
		$x = new php__BytesData_Wrapper($s);
		{
			$tmp2 = new haxe_io_Bytes($len, $x);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function compare($other) {
		$GLOBALS['%s']->push("haxe.io.Bytes::compare");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->b->s < $other->b->s ? -1 : ($this->b->s == $other->b->s ? 0 : 1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getDouble($pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::getDouble");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = ord($this->b->s[$pos]);
		$tmp1 = ord($this->b->s[$pos + 1]);
		$tmp2 = $tmp | $tmp1 << 8;
		$tmp3 = ord($this->b->s[$pos + 2]);
		$tmp4 = $tmp2 | $tmp3 << 16;
		$tmp5 = ord($this->b->s[$pos + 3]);
		$v = $tmp4 | $tmp5 << 24;
		$tmp6 = null;
		if(($v & -2147483648) !== 0) {
			$tmp6 = $v | -2147483648;
		} else {
			$tmp6 = $v;
		}
		$pos1 = $pos + 4;
		$tmp7 = ord($this->b->s[$pos1]);
		$tmp8 = ord($this->b->s[$pos1 + 1]);
		$tmp9 = $tmp7 | $tmp8 << 8;
		$tmp10 = ord($this->b->s[$pos1 + 2]);
		$tmp11 = $tmp9 | $tmp10 << 16;
		$tmp12 = ord($this->b->s[$pos1 + 3]);
		$v1 = $tmp11 | $tmp12 << 24;
		$tmp13 = null;
		if(($v1 & -2147483648) !== 0) {
			$tmp13 = $v1 | -2147483648;
		} else {
			$tmp13 = $v1;
		}
		{
			$tmp14 = haxe_io_FPHelper::i64ToDouble($tmp6, $tmp13);
			$GLOBALS['%s']->pop();
			return $tmp14;
		}
		$GLOBALS['%s']->pop();
	}
	public function getFloat($pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::getFloat");
		$__hx__spos = $GLOBALS['%s']->length;
		$b = new haxe_io_BytesInput($this, $pos, 4);
		$tmp = $b->readInt32();
		{
			$tmp2 = haxe_io_FPHelper::i32ToFloat($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function setDouble($pos, $v) {
		$GLOBALS['%s']->push("haxe.io.Bytes::setDouble");
		$__hx__spos = $GLOBALS['%s']->length;
		$i = haxe_io_FPHelper::doubleToI64($v);
		{
			$v1 = $i->low;
			$this->b->s[$pos] = chr($v1);
			$this->b->s[$pos + 1] = chr($v1 >> 8);
			$this->b->s[$pos + 2] = chr($v1 >> 16);
			$this->b->s[$pos + 3] = chr(_hx_shift_right($v1, 24));
		}
		{
			$pos1 = $pos + 4;
			$v2 = $i->high;
			$this->b->s[$pos1] = chr($v2);
			$this->b->s[$pos1 + 1] = chr($v2 >> 8);
			$this->b->s[$pos1 + 2] = chr($v2 >> 16);
			$this->b->s[$pos1 + 3] = chr(_hx_shift_right($v2, 24));
		}
		$GLOBALS['%s']->pop();
	}
	public function setFloat($pos, $v) {
		$GLOBALS['%s']->push("haxe.io.Bytes::setFloat");
		$__hx__spos = $GLOBALS['%s']->length;
		$v1 = haxe_io_FPHelper::floatToI32($v);
		$this->b->s[$pos] = chr($v1);
		$this->b->s[$pos + 1] = chr($v1 >> 8);
		$this->b->s[$pos + 2] = chr($v1 >> 16);
		$this->b->s[$pos + 3] = chr(_hx_shift_right($v1, 24));
		$GLOBALS['%s']->pop();
	}
	public function getUInt16($pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::getUInt16");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = ord($this->b->s[$pos]);
		$tmp1 = ord($this->b->s[$pos + 1]);
		{
			$tmp2 = $tmp | $tmp1 << 8;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function setUInt16($pos, $v) {
		$GLOBALS['%s']->push("haxe.io.Bytes::setUInt16");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b->s[$pos] = chr($v);
		$this->b->s[$pos + 1] = chr($v >> 8);
		$GLOBALS['%s']->pop();
	}
	public function getInt32($pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::getInt32");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = ord($this->b->s[$pos]);
		$tmp1 = ord($this->b->s[$pos + 1]);
		$tmp2 = $tmp | $tmp1 << 8;
		$tmp3 = ord($this->b->s[$pos + 2]);
		$tmp4 = $tmp2 | $tmp3 << 16;
		$tmp5 = ord($this->b->s[$pos + 3]);
		$v = $tmp4 | $tmp5 << 24;
		if(($v & -2147483648) !== 0) {
			$tmp6 = $v | -2147483648;
			$GLOBALS['%s']->pop();
			return $tmp6;
		} else {
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function getInt64($pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::getInt64");
		$__hx__spos = $GLOBALS['%s']->length;
		$pos1 = $pos + 4;
		$tmp = ord($this->b->s[$pos1]);
		$tmp1 = ord($this->b->s[$pos1 + 1]);
		$tmp2 = $tmp | $tmp1 << 8;
		$tmp3 = ord($this->b->s[$pos1 + 2]);
		$tmp4 = $tmp2 | $tmp3 << 16;
		$tmp5 = ord($this->b->s[$pos1 + 3]);
		$v = $tmp4 | $tmp5 << 24;
		$high = null;
		if(($v & -2147483648) !== 0) {
			$high = $v | -2147483648;
		} else {
			$high = $v;
		}
		$tmp6 = ord($this->b->s[$pos]);
		$tmp7 = ord($this->b->s[$pos + 1]);
		$tmp8 = $tmp6 | $tmp7 << 8;
		$tmp9 = ord($this->b->s[$pos + 2]);
		$tmp10 = $tmp8 | $tmp9 << 16;
		$tmp11 = ord($this->b->s[$pos + 3]);
		$v1 = $tmp10 | $tmp11 << 24;
		$low = null;
		if(($v1 & -2147483648) !== 0) {
			$low = $v1 | -2147483648;
		} else {
			$low = $v1;
		}
		$x = new haxe__Int64____Int64($high, $low);
		{
			$tmp12 = $x;
			$GLOBALS['%s']->pop();
			return $tmp12;
		}
		$GLOBALS['%s']->pop();
	}
	public function setInt32($pos, $v) {
		$GLOBALS['%s']->push("haxe.io.Bytes::setInt32");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b->s[$pos] = chr($v);
		$this->b->s[$pos + 1] = chr($v >> 8);
		$this->b->s[$pos + 2] = chr($v >> 16);
		$this->b->s[$pos + 3] = chr(_hx_shift_right($v, 24));
		$GLOBALS['%s']->pop();
	}
	public function setInt64($pos, $v) {
		$GLOBALS['%s']->push("haxe.io.Bytes::setInt64");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$v1 = $v->low;
			$this->b->s[$pos] = chr($v1);
			$this->b->s[$pos + 1] = chr($v1 >> 8);
			$this->b->s[$pos + 2] = chr($v1 >> 16);
			$this->b->s[$pos + 3] = chr(_hx_shift_right($v1, 24));
		}
		{
			$pos1 = $pos + 4;
			$v2 = $v->high;
			$this->b->s[$pos1] = chr($v2);
			$this->b->s[$pos1 + 1] = chr($v2 >> 8);
			$this->b->s[$pos1 + 2] = chr($v2 >> 16);
			$this->b->s[$pos1 + 3] = chr(_hx_shift_right($v2, 24));
		}
		$GLOBALS['%s']->pop();
	}
	public function getString($pos, $len) {
		$GLOBALS['%s']->push("haxe.io.Bytes::getString");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $this->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		{
			$tmp2 = substr($this->b->s, $pos, $len);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function readString($pos, $len) {
		$GLOBALS['%s']->push("haxe.io.Bytes::readString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->getString($pos, $len);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("haxe.io.Bytes::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->b->s;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function toHex() {
		$GLOBALS['%s']->push("haxe.io.Bytes::toHex");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = new StringBuf();
		$chars = (new _hx_array(array()));
		$str = "0123456789abcdef";
		{
			$_g1 = 0;
			$_g = strlen($str);
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp = _hx_char_code_at($str, $i);
				$chars->push($tmp);
				unset($tmp,$i);
			}
		}
		{
			$_g11 = 0;
			$_g2 = $this->length;
			while($_g11 < $_g2) {
				$i1 = $_g11++;
				$c = ord($this->b->s[$i1]);
				$tmp1 = $chars[$c >> 4];
				$s->b .= _hx_string_or_null(chr($tmp1));
				$tmp2 = $chars[$c & 15];
				$s->b .= _hx_string_or_null(chr($tmp2));
				unset($tmp2,$tmp1,$i1,$c);
			}
		}
		{
			$tmp = $s->b;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getData() {
		$GLOBALS['%s']->push("haxe.io.Bytes::getData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->b;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function alloc($length) {
		$GLOBALS['%s']->push("haxe.io.Bytes::alloc");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = str_repeat(chr(0), $length);
		$x = new php__BytesData_Wrapper($s);
		{
			$tmp = new haxe_io_Bytes($length, $x);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofString($s) {
		$GLOBALS['%s']->push("haxe.io.Bytes::ofString");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = new php__BytesData_Wrapper($s);
		$x1 = $x;
		$tmp = strlen($x1->s);
		{
			$tmp2 = new haxe_io_Bytes($tmp, $x1);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofData($b) {
		$GLOBALS['%s']->push("haxe.io.Bytes::ofData");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = strlen($b->s);
		{
			$tmp2 = new haxe_io_Bytes($tmp, $b);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function fastGet($b, $pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::fastGet");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ord($b->s[$pos]);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return $this->toString(); }
}
