<?php

// Generated by Haxe 3.3.0
class haxe_io_BytesBuffer {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b = "";
		$GLOBALS['%s']->pop();
	}}
	public $b;
	public function get_length() {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::get_length");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = strlen($this->b);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function addByte($byte) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::addByte");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b .= _hx_string_or_null(chr($byte));
		$GLOBALS['%s']->pop();
	}
	public function add($src) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::add");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b .= _hx_string_or_null($src->b->s);
		$GLOBALS['%s']->pop();
	}
	public function addString($v) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::addString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b .= _hx_string_or_null(haxe_io_Bytes::ofString($v)->b->s);
		$GLOBALS['%s']->pop();
	}
	public function addInt32($v) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::addInt32");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->b .= _hx_string_or_null(chr($v & 255));
		$this->b .= _hx_string_or_null(chr($v >> 8 & 255));
		$this->b .= _hx_string_or_null(chr($v >> 16 & 255));
		$this->b .= _hx_string_or_null(chr(_hx_shift_right($v, 24)));
		$GLOBALS['%s']->pop();
	}
	public function addInt64($v) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::addInt64");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->addInt32($v->low);
		$this->addInt32($v->high);
		$GLOBALS['%s']->pop();
	}
	public function addFloat($v) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::addFloat");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = haxe_io_FPHelper::floatToI32($v);
		$this->addInt32($tmp);
		$GLOBALS['%s']->pop();
	}
	public function addDouble($v) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::addDouble");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = haxe_io_FPHelper::doubleToI64($v);
		$this->addInt64($tmp);
		$GLOBALS['%s']->pop();
	}
	public function addBytes($src, $pos, $len) {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::addBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $src->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		$s = substr($src->b->s, $pos, $len);
		$x = new php__BytesData_Wrapper($s);
		$this->b .= _hx_string_or_null($x->s);
		$GLOBALS['%s']->pop();
	}
	public function getBytes() {
		$GLOBALS['%s']->push("haxe.io.BytesBuffer::getBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = strlen($this->b);
		$x = new php__BytesData_Wrapper($this->b);
		$this1 = $x;
		$bytes = new haxe_io_Bytes($tmp, $this1);
		$this->b = null;
		{
			$GLOBALS['%s']->pop();
			return $bytes;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return 'haxe.io.BytesBuffer'; }
}
