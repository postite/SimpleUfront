<?php

// Generated by Haxe 3.3.0
class haxe_io_BytesInput extends haxe_io_Input {
	public function __construct($b, $pos = null, $len = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("haxe.io.BytesInput::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $pos === null;
		if($tmp) {
			$pos = 0;
		}
		$tmp1 = $len === null;
		if($tmp1) {
			$len = $b->length - $pos;
		}
		$tmp2 = null;
		$tmp3 = null;
		if($pos >= 0) {
			$tmp3 = $len < 0;
		} else {
			$tmp3 = true;
		}
		if(!$tmp3) {
			$tmp2 = $pos + $len > $b->length;
		} else {
			$tmp2 = true;
		}
		if($tmp2) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		$this->b = $b->b;
		$this->pos = $pos;
		$this->len = $len;
		$this->totlen = $len;
		$GLOBALS['%s']->pop();
	}}
	public $b;
	public $pos;
	public $len;
	public $totlen;
	public function get_position() {
		$GLOBALS['%s']->push("haxe.io.BytesInput::get_position");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->pos;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_length() {
		$GLOBALS['%s']->push("haxe.io.BytesInput::get_length");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->totlen;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function set_position($p) {
		$GLOBALS['%s']->push("haxe.io.BytesInput::set_position");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $p < 0;
		if($tmp) {
			$p = 0;
		} else {
			$tmp1 = $p > $this->totlen;
			if($tmp1) {
				$p = $this->totlen;
			}
		}
		$this->len = $this->totlen - $p;
		{
			$tmp2 = $this->pos = $p;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function readByte() {
		$GLOBALS['%s']->push("haxe.io.BytesInput::readByte");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->len === 0) {
			throw new HException(new haxe_io_Eof());
		}
		$this->len--;
		$pos = $this->pos++;
		{
			$tmp = ord($this->b->s[$pos]);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function readBytes($buf, $pos, $len) {
		$GLOBALS['%s']->push("haxe.io.BytesInput::readBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $buf->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		$tmp2 = null;
		if($this->len === 0) {
			$tmp2 = $len > 0;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			throw new HException(new haxe_io_Eof());
		}
		$tmp3 = $this->len < $len;
		if($tmp3) {
			$len = $this->len;
		}
		{
			$this1 = $buf->b;
			$srcpos = $this->pos;
			{
				$val = substr($this1->s, 0, $pos) . substr($this->b->s, $srcpos, $len) . substr($this1->s, $pos+$len);
				$this1->s = $val;
			}
		}
		$this->pos += $len;
		$this->len -= $len;
		{
			$GLOBALS['%s']->pop();
			return $len;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("get_length" => "get_length","set_position" => "set_position","get_position" => "get_position","set_bigEndian" => "set_bigEndian");
	function __toString() { return 'haxe.io.BytesInput'; }
}
