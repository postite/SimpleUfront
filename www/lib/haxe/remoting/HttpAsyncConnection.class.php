<?php

// Generated by Haxe 3.3.0
class haxe_remoting_HttpAsyncConnection implements haxe_remoting_AsyncConnection{
	public function __construct($data, $path) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("haxe.remoting.HttpAsyncConnection::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->__data = $data;
		$this->__path = $path;
		$GLOBALS['%s']->pop();
	}}
	public $__data;
	public $__path;
	public function resolve($name) {
		$GLOBALS['%s']->push("haxe.remoting.HttpAsyncConnection::resolve");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $this->__path->copy();
		$c = new haxe_remoting_HttpAsyncConnection($this->__data, $tmp);
		$c->__path->push($name);
		{
			$GLOBALS['%s']->pop();
			return $c;
		}
		$GLOBALS['%s']->pop();
	}
	public function setErrorHandler($h) {
		$GLOBALS['%s']->push("haxe.remoting.HttpAsyncConnection::setErrorHandler");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->__data->error = $h;
		$GLOBALS['%s']->pop();
	}
	public function call($params, $onResult = null) {
		$GLOBALS['%s']->push("haxe.remoting.HttpAsyncConnection::call");
		$__hx__spos = $GLOBALS['%s']->length;
		$h = new haxe_Http($this->__data->url);
		$s = new haxe_Serializer();
		$s->serialize($this->__path);
		$s->serialize($params);
		$h->setHeader("X-Haxe-Remoting", "1");
		$tmp = $s->toString();
		$h->setParameter("__x", $tmp);
		$error = (isset($this->__data->error) ? $this->__data->error: array($this->__data, "error"));
		$h->onData = array(new _hx_lambda(array(&$error, &$onResult), "haxe_remoting_HttpAsyncConnection_0"), 'execute');
		$h->onError = $error;
		$h->request(true);
		$GLOBALS['%s']->pop();
	}
	public $__dynamics = array();
	public function __get($n) {
		if(isset($this->__dynamics[$n]))
			return $this->__dynamics[$n];
	}
	public function __set($n, $v) {
		$this->__dynamics[$n] = $v;
	}
	public function __call($n, $a) {
		if(isset($this->__dynamics[$n]) && is_callable($this->__dynamics[$n]))
			return call_user_func_array($this->__dynamics[$n], $a);
		if('toString' == $n)
			return $this->__toString();
		throw new HException("Unable to call <".$n.">");
	}
	static function urlConnect($url) {
		$GLOBALS['%s']->push("haxe.remoting.HttpAsyncConnection::urlConnect");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new haxe_remoting_HttpAsyncConnection(_hx_anonymous(array("url" => $url, "error" => array(new _hx_lambda(array(), "haxe_remoting_HttpAsyncConnection_1"), 'execute'))), (new _hx_array(array())));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'haxe.remoting.HttpAsyncConnection'; }
}
function haxe_remoting_HttpAsyncConnection_0(&$error, &$onResult, $response) {
	{
		$GLOBALS['%s']->push("haxe.remoting.HttpAsyncConnection::call@58");
		$__hx__spos = $GLOBALS['%s']->length;
		$ok = true;
		$ret = null;
		try {
			$tmp1 = _hx_substr($response, 0, 3);
			if($tmp1 !== "hxr") {
				throw new HException("Invalid response : '" . _hx_string_or_null($response) . "'");
			}
			$tmp2 = _hx_substr($response, 3, null);
			$s1 = new haxe_Unserializer($tmp2);
			$ret = $s1->unserialize();
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$err = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$ret = null;
				$ok = false;
				call_user_func_array($error, array($err));
			}
		}
		$tmp3 = null;
		if($ok) {
			$tmp3 = $onResult !== null;
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			call_user_func_array($onResult, array($ret));
		}
		$GLOBALS['%s']->pop();
	}
}
function haxe_remoting_HttpAsyncConnection_1($e) {
	{
		$GLOBALS['%s']->push("haxe.remoting.HttpAsyncConnection::urlConnect@77");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException($e);
		$GLOBALS['%s']->pop();
	}
}
