<?php

// Generated by Haxe 3.3.0
class haxe_remoting_HttpConnection implements haxe_remoting_Connection{
	public function __construct($url, $path) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->__url = $url;
		$this->__path = $path;
		$GLOBALS['%s']->pop();
	}}
	public $__url;
	public $__path;
	public function resolve($name) {
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::resolve");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $this->__path->copy();
		$c = new haxe_remoting_HttpConnection($this->__url, $tmp);
		$c->__path->push($name);
		{
			$GLOBALS['%s']->pop();
			return $c;
		}
		$GLOBALS['%s']->pop();
	}
	public function call($params) {
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::call");
		$__hx__spos = $GLOBALS['%s']->length;
		$data = null;
		$h = new haxe_Http($this->__url);
		$h->cnxTimeout = haxe_remoting_HttpConnection::$TIMEOUT;
		$s = new haxe_Serializer();
		$s->serialize($this->__path);
		$s->serialize($params);
		$h->setHeader("X-Haxe-Remoting", "1");
		$tmp = $s->toString();
		$h->setParameter("__x", $tmp);
		$h->onData = array(new _hx_lambda(array(&$data), "haxe_remoting_HttpConnection_0"), 'execute');
		$h->onError = array(new _hx_lambda(array(), "haxe_remoting_HttpConnection_1"), 'execute');
		$h->request(true);
		$tmp1 = _hx_substr($data, 0, 3);
		if($tmp1 !== "hxr") {
			throw new HException("Invalid response : '" . _hx_string_or_null($data) . "'");
		}
		$data = _hx_substr($data, 3, null);
		{
			$tmp2 = _hx_deref(new haxe_Unserializer($data))->unserialize();
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public $__dynamics = array();
	public function __get($n) {
		if(isset($this->__dynamics[$n]))
			return $this->__dynamics[$n];
	}
	public function __set($n, $v) {
		$this->__dynamics[$n] = $v;
	}
	public function __call($n, $a) {
		if(isset($this->__dynamics[$n]) && is_callable($this->__dynamics[$n]))
			return call_user_func_array($this->__dynamics[$n], $a);
		if('toString' == $n)
			return $this->__toString();
		throw new HException("Unable to call <".$n.">");
	}
	static $TIMEOUT = 10.;
	static function urlConnect($url) {
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::urlConnect");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new haxe_remoting_HttpConnection($url, (new _hx_array(array())));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function handleRequest($ctx) {
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::handleRequest");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = php_Web::getParams();
		$v = $this1->get("__x");
		$tmp = null;
		$tmp1 = php_Web::getClientHeader("X-Haxe-Remoting");
		if($tmp1 !== null) {
			$tmp = $v === null;
		} else {
			$tmp = true;
		}
		if($tmp) {
			$GLOBALS['%s']->pop();
			return false;
		}
		$tmp2 = haxe_remoting_HttpConnection::processRequest($v, $ctx);
		php_Lib::hprint($tmp2);
		{
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
	static function processRequest($requestData, $ctx) {
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::processRequest");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$u = new haxe_Unserializer($requestData);
			$path = $u->unserialize();
			$args = $u->unserialize();
			$data = $ctx->call($path, $args);
			$s = new haxe_Serializer();
			$s->serialize($data);
			$tmp = $s->toString();
			{
				$tmp2 = "hxr" . _hx_string_or_null($tmp);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$s1 = new haxe_Serializer();
				$s1->serializeException($e);
				$tmp1 = $s1->toString();
				{
					$tmp = "hxr" . _hx_string_or_null($tmp1);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'haxe.remoting.HttpConnection'; }
}
function haxe_remoting_HttpConnection_0(&$data, $d) {
	{
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::call@62");
		$__hx__spos = $GLOBALS['%s']->length;
		$data = $d;
		$GLOBALS['%s']->pop();
	}
}
function haxe_remoting_HttpConnection_1($e) {
	{
		$GLOBALS['%s']->push("haxe.remoting.HttpConnection::call@63");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException($e);
		$GLOBALS['%s']->pop();
	}
}
