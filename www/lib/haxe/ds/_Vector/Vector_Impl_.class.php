<?php

// Generated by Haxe 3.3.0
class haxe_ds__Vector_Vector_Impl_ {
	public function __construct(){}
	static function _new($length) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = (new _hx_array(array()));
		$this1->length = $length;
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function get($this1, $index) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::get");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1[$index];
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function set($this1, $index, $val) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::set");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1[$index] = $val;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function get_length($this1) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::get_length");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->length;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function blit($src, $srcPos, $dest, $destPos, $len) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::blit");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g1 = 0;
		while($_g1 < $len) {
			$i = $_g1++;
			$dest[$destPos + $i] = $src[$srcPos + $i];
			unset($i);
		}
		$GLOBALS['%s']->pop();
	}
	static function toArray($this1) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::toArray");
		$__hx__spos = $GLOBALS['%s']->length;
		$a = new _hx_array(array());
		$len = $this1->length;
		{
			$_g1 = 0;
			while($_g1 < $len) {
				$i = $_g1++;
				$a[$i] = $this1[$i];
				unset($i);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $a;
		}
		$GLOBALS['%s']->pop();
	}
	static function toData($this1) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::toData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromData($data) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::fromData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $data;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromArrayCopy($array) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::fromArrayCopy");
		$__hx__spos = $GLOBALS['%s']->length;
		$length = $array->length;
		$this1 = (new _hx_array(array()));
		$this1->length = $length;
		$vec = $this1;
		{
			$_g1 = 0;
			$_g = $array->length;
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp = $array[$i];
				$vec[$i] = $tmp;
				unset($tmp,$i);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $vec;
		}
		$GLOBALS['%s']->pop();
	}
	static function copy($this1) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::copy");
		$__hx__spos = $GLOBALS['%s']->length;
		$length = $this1->length;
		$this2 = (new _hx_array(array()));
		$this2->length = $length;
		$r = $this2;
		haxe_ds__Vector_Vector_Impl_::blit($this1, 0, $r, 0, $this1->length);
		{
			$GLOBALS['%s']->pop();
			return $r;
		}
		$GLOBALS['%s']->pop();
	}
	static function join($this1, $sep) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::join");
		$__hx__spos = $GLOBALS['%s']->length;
		$b = new StringBuf();
		$len = $this1->length;
		{
			$_g1 = 0;
			while($_g1 < $len) {
				$i = $_g1++;
				$tmp = Std::string($this1[$i]);
				$b->add($tmp);
				if($i < $len - 1) {
					$b->add($sep);
				}
				unset($tmp,$i);
			}
		}
		{
			$tmp = $b->b;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function map($this1, $f) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::map");
		$__hx__spos = $GLOBALS['%s']->length;
		$length = $this1->length;
		$this2 = (new _hx_array(array()));
		$this2->length = $length;
		$r = $this2;
		{
			$_g1 = 0;
			while($_g1 < $length) {
				$i = $_g1++;
				$v = call_user_func_array($f, array($this1[$i]));
				$r[$i] = $v;
				unset($v,$i);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $r;
		}
		$GLOBALS['%s']->pop();
	}
	static function sort($this1, $f) {
		$GLOBALS['%s']->push("haxe.ds._Vector.Vector_Impl_::sort");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1->sort($f);
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return 'haxe.ds._Vector.Vector_Impl_'; }
}
