<?php

// Generated by Haxe 3.3.0
class haxe__Int32_Int32_Impl_ {
	public function __construct(){}
	static function preIncrement($this1) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::preIncrement");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = ++$this1;
		$this1 = $x << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		{
			$GLOBALS['%s']->pop();
			return $this1;
		}
		$GLOBALS['%s']->pop();
	}
	static function postIncrement($this1) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::postIncrement");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $this1++;
		$tmp = $this1 << haxe__Int32_Int32_Impl_::$extraBits;
		$this1 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	static function preDecrement($this1) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::preDecrement");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = --$this1;
		$this1 = $x << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		{
			$GLOBALS['%s']->pop();
			return $this1;
		}
		$GLOBALS['%s']->pop();
	}
	static function postDecrement($this1) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::postDecrement");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $this1--;
		$tmp = $this1 << haxe__Int32_Int32_Impl_::$extraBits;
		$this1 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	static function add($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::add");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a + $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function addInt($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::addInt");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a + $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function sub($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::sub");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function subInt($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::subInt");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function intSub($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::intSub");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function mul($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::mul");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a * ($b & 65535) + ($a * (_hx_shift_right($b, 16)) << 16 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function mulInt($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::mulInt");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = haxe__Int32_Int32_Impl_::mul($a, $b);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function shl($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::shl");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a << $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function shlInt($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::shlInt");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a << $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function intShl($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::intShl");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $a << $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function toFloat($this1) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::toFloat");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $this1;
		}
		$GLOBALS['%s']->pop();
	}
	static function ucompare($a, $b) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::ucompare");
		$__hx__spos = $GLOBALS['%s']->length;
		if($a < 0) {
			if($b < 0) {
				$tmp = ~$b - ~$a << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$GLOBALS['%s']->pop();
				return 1;
			}
		}
		if($b < 0) {
			$GLOBALS['%s']->pop();
			return -1;
		} else {
			$tmp = $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $extraBits;
	static function clamp($x) {
		$GLOBALS['%s']->push("haxe._Int32.Int32_Impl_::clamp");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $x << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'haxe._Int32.Int32_Impl_'; }
}
haxe__Int32_Int32_Impl_::$extraBits = haxe__Int32_Int32_Impl__0();
function haxe__Int32_Int32_Impl__0() {
	{
		$tmp = PHP_INT_SIZE;
		return $tmp * 8 - 32;
	}
}
