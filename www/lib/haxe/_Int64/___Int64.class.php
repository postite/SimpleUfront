<?php

// Generated by Haxe 3.3.0
class haxe__Int64____Int64 {
	public function __construct($high, $low) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("haxe._Int64.___Int64::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->high = $high;
		$this->low = $low;
		$GLOBALS['%s']->pop();
	}}
	public $high;
	public $low;
	public function toString() {
		$GLOBALS['%s']->push("haxe._Int64.___Int64::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = haxe__Int64_Int64_Impl_::toString($this);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
