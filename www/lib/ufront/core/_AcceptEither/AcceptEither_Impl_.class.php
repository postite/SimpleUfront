<?php

// Generated by Haxe 3.3.0
class ufront_core__AcceptEither_AcceptEither_Impl_ {
	public function __construct(){}
	static function _new($e) {
		$GLOBALS['%s']->push("ufront.core._AcceptEither.AcceptEither_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $e;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function get_value($this1) {
		$GLOBALS['%s']->push("ufront.core._AcceptEither.AcceptEither_Impl_::get_value");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($this1->index) {
		case 0:{
			$tmp = _hx_deref($this1)->params[0];
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 1:{
			$v = _hx_deref($this1)->params[0];
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	static function get_type($this1) {
		$GLOBALS['%s']->push("ufront.core._AcceptEither.AcceptEither_Impl_::get_type");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $this1;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromA($v) {
		$GLOBALS['%s']->push("ufront.core._AcceptEither.AcceptEither_Impl_::fromA");
		$__hx__spos = $GLOBALS['%s']->length;
		$e = tink_core_Either::Left($v);
		{
			$tmp = $e;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromB($v) {
		$GLOBALS['%s']->push("ufront.core._AcceptEither.AcceptEither_Impl_::fromB");
		$__hx__spos = $GLOBALS['%s']->length;
		$e = tink_core_Either::Right($v);
		{
			$tmp = $e;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_type" => "get_type","get_value" => "get_value");
	function __toString() { return 'ufront.core._AcceptEither.AcceptEither_Impl_'; }
}
