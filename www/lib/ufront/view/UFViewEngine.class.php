<?php

// Generated by Haxe 3.3.0
class ufront_view_UFViewEngine {
	public function __construct($cachingEnabled = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $cachingEnabled === null;
		if($tmp) {
			$cachingEnabled = ufront_view_UFViewEngine::$cacheEnabledByDefault;
		}
		if($cachingEnabled) {
			$this->cache = new haxe_ds_StringMap();
		}
		$this->engines = (new _hx_array(array()));
		$GLOBALS['%s']->pop();
	}}
	public $engines;
	public $cache;
	public function getTemplate($path, $templatingEngine = null) {
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::getTemplate");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = null;
		if($this->cache !== null) {
			$tmp = $this->cache->exists($path);
		} else {
			$tmp = false;
		}
		if($tmp) {
			$cached = $this->cache->get($path);
			$tmp1 = null;
			if($templatingEngine !== null) {
				$tmp1 = $templatingEngine->type === $cached->a;
			} else {
				$tmp1 = true;
			}
			if($tmp1) {
				$tmp2 = tink_core_Outcome::Success((isset($cached->b) ? $cached->b: array($cached, "b")));
				{
					$tmp3 = tink_core__Future_Future_Impl_::sync($tmp2);
					$GLOBALS['%s']->pop();
					return $tmp3;
				}
			}
		}
		$tplStrReady = new tink_core_FutureTrigger();
		$ext = haxe_io_Path::extension($path);
		$finalPath = null;
		$tmp3 = null;
		if($templatingEngine !== null) {
			$tmp3 = $ext !== "";
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			$finalPath = $path;
			{
				$this1 = $this->getTemplateString($finalPath);
				$this1(array(new _hx_lambda(array(&$path, &$tplStrReady), "ufront_view_UFViewEngine_0"), 'execute'));
			}
		} else {
			$tmp6 = null;
			if($templatingEngine !== null) {
				$tmp6 = $ext === "";
			} else {
				$tmp6 = false;
			}
			if($tmp6) {
				$exts = $templatingEngine->extensions->copy();
				$testNextExtension = null;
				$testNextExtension = array(new _hx_lambda(array(&$_gthis, &$exts, &$finalPath, &$path, &$templatingEngine, &$testNextExtension, &$tplStrReady), "ufront_view_UFViewEngine_1"), 'execute');
				call_user_func($testNextExtension);
			} else {
				$tmp12 = null;
				if($templatingEngine === null) {
					$tmp12 = $ext !== "";
				} else {
					$tmp12 = false;
				}
				if($tmp12) {
					$tplEngines = $this->engines->copy();
					$testNextEngine = null;
					$testNextEngine = array(new _hx_lambda(array(&$_gthis, &$ext, &$finalPath, &$path, &$templatingEngine, &$testNextEngine, &$tplEngines, &$tplStrReady), "ufront_view_UFViewEngine_2"), 'execute');
					call_user_func($testNextEngine);
				} else {
					$tmp17 = null;
					if($templatingEngine === null) {
						$tmp17 = $ext === "";
					} else {
						$tmp17 = false;
					}
					if($tmp17) {
						$tplEngines1 = $this->engines->copy();
						$engine1 = null;
						$extensions = (new _hx_array(array()));
						$extensionsUsed = (new _hx_array(array()));
						$ext2 = null;
						$testNextEngineOrExtension = null;
						$testNextEngineOrExtension = array(new _hx_lambda(array(&$_gthis, &$engine1, &$ext2, &$extensions, &$extensionsUsed, &$finalPath, &$path, &$templatingEngine, &$testNextEngineOrExtension, &$tplEngines1, &$tplStrReady), "ufront_view_UFViewEngine_3"), 'execute');
						call_user_func($testNextEngineOrExtension);
					}
				}
			}
		}
		{
			$tmp2 = tink_core__Future_Future_Impl_::_tryFailingMap((isset($tplStrReady->future) ? $tplStrReady->future: array($tplStrReady, "future")), array(new _hx_lambda(array(&$_gthis, &$finalPath, &$path, &$templatingEngine), "ufront_view_UFViewEngine_4"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function getTemplateString($path) {
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::getTemplateString");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = tink_core_Outcome::Failure(new tink_core_TypedError(null, "Attempting to fetch template " . _hx_string_or_null($path) . " with UFViewEngine.  This is an abstract class, you must use one of the ViewEngine implementations.", _hx_anonymous(array("fileName" => "UFViewEngine.hx", "lineNumber" => 226, "className" => "ufront.view.UFViewEngine", "methodName" => "getTemplateString"))));
		{
			$tmp2 = tink_core__Future_Future_Impl_::sync($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function addTemplatingEngine($engine) {
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::addTemplatingEngine");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->engines->push($engine);
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $cacheEnabledByDefault = false;
	function __toString() { return 'ufront.view.UFViewEngine'; }
}
function ufront_view_UFViewEngine_0(&$path, &$tplStrReady, $result) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::getTemplate@112");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp4 = $result->index;
		switch($tmp4) {
		case 0:{
			$tmp5 = _hx_deref($result)->params[0]->index;
			switch($tmp5) {
			case 0:{
				$result1 = tink_core_Outcome::Success(_hx_deref(_hx_deref($result)->params[0])->params[0]);
				if($tplStrReady->{"list"} !== null) {
					$list = $tplStrReady->{"list"};
					$tplStrReady->{"list"} = null;
					$tplStrReady->result = $result1;
					tink_core__Callback_CallbackList_Impl_::invoke($list, $result1);
					tink_core__Callback_CallbackList_Impl_::clear($list);
				}
			}break;
			case 1:{
				$result2 = tink_core_Outcome::Failure(new tink_core_TypedError(null, "Template " . _hx_string_or_null($path) . " not found", _hx_anonymous(array("fileName" => "UFViewEngine.hx", "lineNumber" => 115, "className" => "ufront.view.UFViewEngine", "methodName" => "getTemplate"))));
				if($tplStrReady->{"list"} !== null) {
					$list1 = $tplStrReady->{"list"};
					$tplStrReady->{"list"} = null;
					$tplStrReady->result = $result2;
					tink_core__Callback_CallbackList_Impl_::invoke($list1, $result2);
					tink_core__Callback_CallbackList_Impl_::clear($list1);
				}
			}break;
			}
		}break;
		case 1:{
			$result3 = tink_core_Outcome::Failure(_hx_deref($result)->params[0]);
			if($tplStrReady->{"list"} !== null) {
				$list2 = $tplStrReady->{"list"};
				$tplStrReady->{"list"} = null;
				$tplStrReady->result = $result3;
				tink_core__Callback_CallbackList_Impl_::invoke($list2, $result3);
				tink_core__Callback_CallbackList_Impl_::clear($list2);
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_UFViewEngine_1(&$_gthis, &$exts, &$finalPath, &$path, &$templatingEngine, &$testNextExtension, &$tplStrReady) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::getTemplate@121");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp7 = $exts->length > 0;
		if($tmp7) {
			$ext1 = $exts->shift();
			$finalPath = haxe_io_Path::withExtension($path, $ext1);
			{
				$this2 = $_gthis->getTemplateString($finalPath);
				$this2(array(new _hx_lambda(array(&$testNextExtension, &$tplStrReady), "ufront_view_UFViewEngine_5"), 'execute'));
			}
		} else {
			$tmp10 = "No template found for " . _hx_string_or_null($path) . " with extensions ";
			$tmp11 = Std::string($templatingEngine->extensions);
			$result7 = tink_core_Outcome::Failure(new tink_core_TypedError(null, _hx_string_or_null($tmp10) . _hx_string_or_null($tmp11), _hx_anonymous(array("fileName" => "UFViewEngine.hx", "lineNumber" => 131, "className" => "ufront.view.UFViewEngine", "methodName" => "getTemplate"))));
			if($tplStrReady->{"list"} !== null) {
				$list5 = $tplStrReady->{"list"};
				$tplStrReady->{"list"} = null;
				$tplStrReady->result = $result7;
				tink_core__Callback_CallbackList_Impl_::invoke($list5, $result7);
				tink_core__Callback_CallbackList_Impl_::clear($list5);
			}
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_UFViewEngine_2(&$_gthis, &$ext, &$finalPath, &$path, &$templatingEngine, &$testNextEngine, &$tplEngines, &$tplStrReady) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::getTemplate@137");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp13 = $tplEngines->length > 0;
		if($tmp13) {
			$engine = $tplEngines->shift();
			$tmp14 = Lambda::has($engine->extensions, $ext);
			if($tmp14) {
				$finalPath = haxe_io_Path::normalize($path);
				{
					$this3 = $_gthis->getTemplateString($finalPath);
					$this3(array(new _hx_lambda(array(&$engine, &$path, &$templatingEngine, &$tplStrReady), "ufront_view_UFViewEngine_6"), 'execute'));
				}
			} else {
				call_user_func($testNextEngine);
			}
		} else {
			$result12 = tink_core_Outcome::Failure(new tink_core_TypedError(null, "No templating engine found for " . _hx_string_or_null($path) . " (None support extension " . _hx_string_or_null($ext) . ")", _hx_anonymous(array("fileName" => "UFViewEngine.hx", "lineNumber" => 151, "className" => "ufront.view.UFViewEngine", "methodName" => "getTemplate"))));
			if($tplStrReady->{"list"} !== null) {
				$list9 = $tplStrReady->{"list"};
				$tplStrReady->{"list"} = null;
				$tplStrReady->result = $result12;
				tink_core__Callback_CallbackList_Impl_::invoke($list9, $result12);
				tink_core__Callback_CallbackList_Impl_::clear($list9);
			}
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_UFViewEngine_3(&$_gthis, &$engine1, &$ext2, &$extensions, &$extensionsUsed, &$finalPath, &$path, &$templatingEngine, &$testNextEngineOrExtension, &$tplEngines1, &$tplStrReady) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::getTemplate@163");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp18 = null;
		if($extensions->length === 0) {
			$tmp18 = $tplEngines1->length === 0;
		} else {
			$tmp18 = false;
		}
		if($tmp18) {
			{
				$tmp19 = "No template found for " . _hx_string_or_null($path) . " with extensions ";
				$tmp20 = Std::string($extensionsUsed);
				$result13 = tink_core_Outcome::Failure(new tink_core_TypedError(null, _hx_string_or_null($tmp19) . _hx_string_or_null($tmp20), _hx_anonymous(array("fileName" => "UFViewEngine.hx", "lineNumber" => 165, "className" => "ufront.view.UFViewEngine", "methodName" => "getTemplate"))));
				if($tplStrReady->{"list"} !== null) {
					$list10 = $tplStrReady->{"list"};
					$tplStrReady->{"list"} = null;
					$tplStrReady->result = $result13;
					tink_core__Callback_CallbackList_Impl_::invoke($list10, $result13);
					tink_core__Callback_CallbackList_Impl_::clear($list10);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return;
			}
		} else {
			$tmp21 = $extensions->length === 0;
			if($tmp21) {
				$engine1 = $tplEngines1->shift();
				$extensions = $engine1->extensions->copy();
				$ext2 = $extensions->shift();
			} else {
				$ext2 = $extensions->shift();
			}
		}
		$extensionsUsed->push($ext2);
		$finalPath = haxe_io_Path::withExtension($path, $ext2);
		{
			$this4 = $_gthis->getTemplateString($finalPath);
			$this4(array(new _hx_lambda(array(&$engine1, &$templatingEngine, &$testNextEngineOrExtension, &$tplStrReady), "ufront_view_UFViewEngine_7"), 'execute'));
		}
		{
			$GLOBALS['%s']->pop();
			return;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_UFViewEngine_4(&$_gthis, &$finalPath, &$path, &$templatingEngine, $tplStr) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::getTemplate@197");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$tpl = $templatingEngine->factory($tplStr);
			if($_gthis->cache !== null) {
				$this5 = new tink_core_MPair($templatingEngine->type, $tpl);
				$_gthis->cache->set($path, $this5);
			}
			{
				$tmp = tink_core_Outcome::Success($tpl);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp24 = tink_core_TypedError::withData(null, "Failed to parse template " . _hx_string_or_null($finalPath) . " using " . _hx_string_or_null($templatingEngine->type), $e, _hx_anonymous(array("fileName" => "UFViewEngine.hx", "lineNumber" => 205, "className" => "ufront.view.UFViewEngine", "methodName" => "getTemplate")));
				{
					$tmp = tink_core_Outcome::Failure($tmp24);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_UFViewEngine_5(&$testNextExtension, &$tplStrReady, $result4) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::addTemplatingEngine@125");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp8 = $result4->index;
		switch($tmp8) {
		case 0:{
			$tmp9 = _hx_deref($result4)->params[0]->index;
			switch($tmp9) {
			case 0:{
				$result5 = tink_core_Outcome::Success(_hx_deref(_hx_deref($result4)->params[0])->params[0]);
				if($tplStrReady->{"list"} !== null) {
					$list3 = $tplStrReady->{"list"};
					$tplStrReady->{"list"} = null;
					$tplStrReady->result = $result5;
					tink_core__Callback_CallbackList_Impl_::invoke($list3, $result5);
					tink_core__Callback_CallbackList_Impl_::clear($list3);
				}
			}break;
			case 1:{
				call_user_func($testNextExtension);
			}break;
			}
		}break;
		case 1:{
			$result6 = tink_core_Outcome::Failure(_hx_deref($result4)->params[0]);
			if($tplStrReady->{"list"} !== null) {
				$list4 = $tplStrReady->{"list"};
				$tplStrReady->{"list"} = null;
				$tplStrReady->result = $result6;
				tink_core__Callback_CallbackList_Impl_::invoke($list4, $result6);
				tink_core__Callback_CallbackList_Impl_::clear($list4);
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_UFViewEngine_6(&$engine, &$path, &$templatingEngine, &$tplStrReady, $result8) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::addTemplatingEngine@142");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp15 = $result8->index;
		switch($tmp15) {
		case 0:{
			$tmp16 = _hx_deref($result8)->params[0]->index;
			switch($tmp16) {
			case 0:{
				$templatingEngine = $engine;
				{
					$result9 = tink_core_Outcome::Success(_hx_deref(_hx_deref($result8)->params[0])->params[0]);
					if($tplStrReady->{"list"} !== null) {
						$list6 = $tplStrReady->{"list"};
						$tplStrReady->{"list"} = null;
						$tplStrReady->result = $result9;
						tink_core__Callback_CallbackList_Impl_::invoke($list6, $result9);
						tink_core__Callback_CallbackList_Impl_::clear($list6);
					}
				}
			}break;
			case 1:{
				$result10 = tink_core_Outcome::Failure(new tink_core_TypedError(null, "Template " . _hx_string_or_null($path) . " not found", _hx_anonymous(array("fileName" => "UFViewEngine.hx", "lineNumber" => 147, "className" => "ufront.view.UFViewEngine", "methodName" => "getTemplate"))));
				if($tplStrReady->{"list"} !== null) {
					$list7 = $tplStrReady->{"list"};
					$tplStrReady->{"list"} = null;
					$tplStrReady->result = $result10;
					tink_core__Callback_CallbackList_Impl_::invoke($list7, $result10);
					tink_core__Callback_CallbackList_Impl_::clear($list7);
				}
			}break;
			}
		}break;
		case 1:{
			$result11 = tink_core_Outcome::Failure(_hx_deref($result8)->params[0]);
			if($tplStrReady->{"list"} !== null) {
				$list8 = $tplStrReady->{"list"};
				$tplStrReady->{"list"} = null;
				$tplStrReady->result = $result11;
				tink_core__Callback_CallbackList_Impl_::invoke($list8, $result11);
				tink_core__Callback_CallbackList_Impl_::clear($list8);
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_UFViewEngine_7(&$engine1, &$templatingEngine, &$testNextEngineOrExtension, &$tplStrReady, $result14) {
	{
		$GLOBALS['%s']->push("ufront.view.UFViewEngine::addTemplatingEngine@179");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp22 = $result14->index;
		switch($tmp22) {
		case 0:{
			$tmp23 = _hx_deref($result14)->params[0]->index;
			switch($tmp23) {
			case 0:{
				$templatingEngine = $engine1;
				{
					$result15 = tink_core_Outcome::Success(_hx_deref(_hx_deref($result14)->params[0])->params[0]);
					if($tplStrReady->{"list"} !== null) {
						$list11 = $tplStrReady->{"list"};
						$tplStrReady->{"list"} = null;
						$tplStrReady->result = $result15;
						tink_core__Callback_CallbackList_Impl_::invoke($list11, $result15);
						tink_core__Callback_CallbackList_Impl_::clear($list11);
					}
				}
			}break;
			case 1:{
				call_user_func($testNextEngineOrExtension);
			}break;
			}
		}break;
		case 1:{
			$result16 = tink_core_Outcome::Failure(_hx_deref($result14)->params[0]);
			if($tplStrReady->{"list"} !== null) {
				$list12 = $tplStrReady->{"list"};
				$tplStrReady->{"list"} = null;
				$tplStrReady->result = $result16;
				tink_core__Callback_CallbackList_Impl_::invoke($list12, $result16);
				tink_core__Callback_CallbackList_Impl_::clear($list12);
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
