<?php

// Generated by Haxe 3.3.0
class ufront_view_HttpViewEngine extends ufront_view_UFViewEngine {
	public function __construct($cachingEnabled = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.view.HttpViewEngine::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct($cachingEnabled);
		$GLOBALS['%s']->pop();
	}}
	public $viewPath;
	public function getTemplateString($relativeViewPath) {
		$GLOBALS['%s']->push("ufront.view.HttpViewEngine::getTemplateString");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = StringTools::startsWith($relativeViewPath, "/");
		if($tmp) {
			$relativeViewPath = _hx_substr($relativeViewPath, 1, null);
		}
		$tmp1 = haxe_io_Path::addTrailingSlash($this->viewPath);
		$fullPath = _hx_string_or_null($tmp1) . _hx_string_or_null($relativeViewPath);
		try {
			$ft = new tink_core_FutureTrigger();
			$req = new haxe_Http($fullPath);
			$status = -1;
			$req->onStatus = array(new _hx_lambda(array(&$status), "ufront_view_HttpViewEngine_0"), 'execute');
			$req->onData = array(new _hx_lambda(array(&$ft), "ufront_view_HttpViewEngine_1"), 'execute');
			$req->onError = array(new _hx_lambda(array(&$ft, &$fullPath, &$status), "ufront_view_HttpViewEngine_2"), 'execute');
			$req->request(null);
			{
				$tmp2 = (isset($ft->future) ? $ft->future: array($ft, "future"));
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp4 = tink_core_TypedError::withData(null, "Failed to load template " . _hx_string_or_null($fullPath), $e, _hx_anonymous(array("fileName" => "HttpViewEngine.hx", "lineNumber" => 59, "className" => "ufront.view.HttpViewEngine", "methodName" => "getTemplateString")));
				$tmp5 = tink_core_Outcome::Failure($tmp4);
				{
					$tmp2 = tink_core__Future_Future_Impl_::sync($tmp5);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	function __toString() { return 'ufront.view.HttpViewEngine'; }
}
ufront_view_HttpViewEngine::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("rtti" => (new _hx_array(array((new _hx_array(array("viewPath", "String", "viewPath"))))))))));
function ufront_view_HttpViewEngine_0(&$status, $st) {
	{
		$GLOBALS['%s']->push("ufront.view.HttpViewEngine::getTemplateString@50");
		$__hx__spos = $GLOBALS['%s']->length;
		$status = $st;
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_HttpViewEngine_1(&$ft, $data) {
	{
		$GLOBALS['%s']->push("ufront.view.HttpViewEngine::getTemplateString@51");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp2 = haxe_ds_Option::Some($data);
		$result = tink_core_Outcome::Success($tmp2);
		if($ft->{"list"} !== null) {
			$list = $ft->{"list"};
			$ft->{"list"} = null;
			$ft->result = $result;
			tink_core__Callback_CallbackList_Impl_::invoke($list, $result);
			tink_core__Callback_CallbackList_Impl_::clear($list);
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_view_HttpViewEngine_2(&$ft, &$fullPath, &$status, $err) {
	{
		$GLOBALS['%s']->push("ufront.view.HttpViewEngine::getTemplateString@52");
		$__hx__spos = $GLOBALS['%s']->length;
		if($status === 404) {
			$result1 = tink_core_Outcome::Success(haxe_ds_Option::$None);
			if($ft->{"list"} !== null) {
				$list1 = $ft->{"list"};
				$ft->{"list"} = null;
				$ft->result = $result1;
				tink_core__Callback_CallbackList_Impl_::invoke($list1, $result1);
				tink_core__Callback_CallbackList_Impl_::clear($list1);
			}
		} else {
			$tmp3 = tink_core_TypedError::withData($status, "Failed to load template " . _hx_string_or_null($fullPath), $err, _hx_anonymous(array("fileName" => "HttpViewEngine.hx", "lineNumber" => 54, "className" => "ufront.view.HttpViewEngine", "methodName" => "getTemplateString")));
			$result2 = tink_core_Outcome::Failure($tmp3);
			if($ft->{"list"} !== null) {
				$list2 = $ft->{"list"};
				$ft->{"list"} = null;
				$ft->result = $result2;
				tink_core__Callback_CallbackList_Impl_::invoke($list2, $result2);
				tink_core__Callback_CallbackList_Impl_::clear($list2);
			}
		}
		$GLOBALS['%s']->pop();
	}
}
