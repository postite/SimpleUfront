<?php

// Generated by Haxe 3.3.0
class ufront_remoting_RemotingUtil {
	public function __construct(){}
	static function processResponse($response, $onResult, $errorHandler, $remotingCallString) {
		$GLOBALS['%s']->push("ufront.remoting.RemotingUtil::processResponse");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = null;
		$stack = null;
		$hxrFound = false;
		$errors = (new _hx_array(array()));
		$onError = ufront_remoting_RemotingUtil::wrapErrorHandler($errorHandler);
		$tmp = _hx_substr($response, 0, 2);
		if($tmp !== "hx") {
			$tmp1 = ufront_remoting_RemotingError::RNoRemotingResult($remotingCallString, $response);
			call_user_func_array($onError, array($tmp1));
		} else {
			$_g = 0;
			$_g1 = _hx_explode("\x0A", $response);
			while($_g < $_g1->length) {
				$line = $_g1[$_g];
				++$_g;
				if($line === "") {
					continue;
				}
				{
					$_g2 = _hx_substr($line, 0, 3);
					switch($_g2) {
					case "hxe":{
						$tmp2 = _hx_substr($line, 3, null);
						$s = new ufront_remoting_RemotingUnserializer($tmp2, null);
						try {
							$ret = $s->unserialize();
						}catch(Exception $__hx__e) {
							$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
							$e = $_ex_;
							{
								$GLOBALS['%e'] = (new _hx_array(array()));
								while($GLOBALS['%s']->length >= $__hx__spos) {
									$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
								}
								$GLOBALS['%s']->push($GLOBALS['%e'][0]);
								$tmp3 = ufront_remoting_RemotingError::RServerSideException($remotingCallString, $e, $stack);
								$ret = $errors->push($tmp3);
							}
						}
					}break;
					case "hxr":{
						$tmp4 = _hx_substr($line, 3, null);
						$s1 = new ufront_remoting_RemotingUnserializer($tmp4, null);
						try {
							$ret = $s1->unserialize();
						}catch(Exception $__hx__e) {
							$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
							$e1 = $_ex_;
							{
								$GLOBALS['%e'] = (new _hx_array(array()));
								while($GLOBALS['%s']->length >= $__hx__spos) {
									$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
								}
								$GLOBALS['%s']->push($GLOBALS['%e'][0]);
								$tmp5 = _hx_substr($line, 3, null);
								$tmp6 = Std::string($e1);
								$tmp7 = ufront_remoting_RemotingError::RUnserializeFailed($remotingCallString, $tmp5, "" . _hx_string_or_null($tmp6));
								$ret = $errors->push($tmp7);
							}
						}
						$hxrFound = true;
					}break;
					case "hxs":{
						$tmp8 = _hx_substr($line, 3, null);
						$s2 = new ufront_remoting_RemotingUnserializer($tmp8, null);
						try {
							$stack = $s2->unserialize();
						}catch(Exception $__hx__e) {
							$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
							$e2 = $_ex_;
							{
								$GLOBALS['%e'] = (new _hx_array(array()));
								while($GLOBALS['%s']->length >= $__hx__spos) {
									$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
								}
								$GLOBALS['%s']->push($GLOBALS['%e'][0]);
								$tmp9 = _hx_substr($line, 3, null);
								$tmp10 = Std::string($e2);
								$tmp11 = ufront_remoting_RemotingError::RUnserializeFailed($remotingCallString, $tmp9, "" . _hx_string_or_null($tmp10));
								$stack = $errors->push($tmp11);
							}
						}
					}break;
					case "hxt":{
						$tmp12 = _hx_substr($line, 3, null);
						$s3 = new ufront_remoting_RemotingUnserializer($tmp12, null);
						$m = null;
						try {
							$m = $s3->unserialize();
						}catch(Exception $__hx__e) {
							$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
							$e3 = $_ex_;
							{
								$GLOBALS['%e'] = (new _hx_array(array()));
								while($GLOBALS['%s']->length >= $__hx__spos) {
									$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
								}
								$GLOBALS['%s']->push($GLOBALS['%e'][0]);
								$tmp13 = _hx_substr($line, 3, null);
								$tmp14 = Std::string($e3);
								$tmp15 = ufront_remoting_RemotingError::RUnserializeFailed($remotingCallString, $tmp13, "" . _hx_string_or_null($tmp14));
								$m = $errors->push($tmp15);
							}
						}
						$m->pos->fileName = "[R]" . _hx_string_or_null($m->pos->fileName);
						$tmp16 = Std::string($m->type);
						$tmp17 = "[" . _hx_string_or_null($tmp16) . "]";
						$tmp18 = Std::string($m->msg);
						haxe_Log::trace(_hx_string_or_null($tmp17) . _hx_string_or_null($tmp18), $m->pos);
					}break;
					default:{
						$tmp19 = ufront_remoting_RemotingError::RUnserializeFailed($remotingCallString, $line, "Invalid line in response");
						$errors->push($tmp19);
					}break;
					}
					unset($_g2);
				}
				unset($line);
			}
		}
		$tmp20 = $errors->length === 0;
		if($tmp20) {
			if($hxrFound) {
				call_user_func_array($onResult, array($ret));
			} else {
				$tmp21 = ufront_remoting_RemotingError::RNoRemotingResult($remotingCallString, $response);
				call_user_func_array($onError, array($tmp21));
			}
		} else {
			$_g3 = 0;
			while($_g3 < $errors->length) {
				$err = $errors[$_g3];
				++$_g3;
				call_user_func_array($onError, array($err));
				unset($err);
			}
		}
		$GLOBALS['%s']->pop();
	}
	static function wrapErrorHandler($errorHandler) {
		$GLOBALS['%s']->push("ufront.remoting.RemotingUtil::wrapErrorHandler");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = array(new _hx_lambda(array(&$errorHandler), "ufront_remoting_RemotingUtil_0"), 'execute');
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function defaultErrorHandler($error) {
		$GLOBALS['%s']->push("ufront.remoting.RemotingUtil::defaultErrorHandler");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $error->index;
		switch($tmp) {
		case 0:{
			haxe_Log::trace("Error during remoting call " . _hx_string_or_null(_hx_deref($error)->params[0]) . ": The HTTP Request returned status [" . _hx_string_rec(_hx_deref($error)->params[1], "") . "].", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 125, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
			haxe_Log::trace("Returned data: " . _hx_string_or_null(_hx_deref($error)->params[2]), _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 126, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
		}break;
		case 1:{
			haxe_Log::trace("Error during remoting call " . _hx_string_or_null(_hx_deref($error)->params[0]) . ": API or Method is not found or not available in the remoting context.", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 128, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
			haxe_Log::trace("Error message: " . _hx_string_or_null(_hx_deref($error)->params[1]), _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 129, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
		}break;
		case 2:{
			$tmp1 = "Error during remoting call " . _hx_string_or_null(_hx_deref($error)->params[0]) . ": The server threw an error \"";
			$tmp2 = Std::string(_hx_deref($error)->params[1]);
			haxe_Log::trace(_hx_string_or_null($tmp1) . _hx_string_or_null($tmp2) . "\".", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 131, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
			haxe_Log::trace(_hx_deref($error)->params[2], _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 132, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
		}break;
		case 3:{
			$tmp3 = "Error during remoting call " . _hx_string_or_null(_hx_deref($error)->params[0]) . ": The client throw an error \"";
			$tmp4 = Std::string(_hx_deref($error)->params[1]);
			haxe_Log::trace(_hx_string_or_null($tmp3) . _hx_string_or_null($tmp4) . "\" during the remoting callback.", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 134, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
			haxe_Log::trace("Compiling with \"-debug\" will prevent this error being caught, so you can use your browser's debugger to collect more information.", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 135, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
		}break;
		case 4:{
			$err = _hx_deref($error)->params[2];
			{
				haxe_Log::trace("Error during remoting call " . _hx_string_or_null(_hx_deref($error)->params[0]) . ": Failed to unserialize this line in the response: \"" . _hx_string_or_null($err) . "\"", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 137, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
				haxe_Log::trace("The line that failed: \"" . _hx_string_or_null($err) . "\"", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 138, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
			}
		}break;
		case 5:{
			haxe_Log::trace("Error during remoting call " . _hx_string_or_null(_hx_deref($error)->params[0]) . ": No remoting result in data.", _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 140, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
			haxe_Log::trace("Returned data: " . _hx_string_or_null(_hx_deref($error)->params[1]), _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 141, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
		}break;
		case 6:{
			$data = _hx_deref($error)->params[1];
			haxe_Log::trace("The remoting call " . _hx_string_or_null(_hx_deref($error)->params[0]) . " functioned correctly, but the API returned a failure: " . _hx_string_or_null($data), _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 143, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
		}break;
		case 7:{
			$tmp5 = Std::string(_hx_deref($error)->params[0]);
			haxe_Log::trace("Unknown error encountered during remoting call: " . _hx_string_or_null($tmp5), _hx_anonymous(array("fileName" => "RemotingUtil.hx", "lineNumber" => 145, "className" => "ufront.remoting.RemotingUtil", "methodName" => "defaultErrorHandler")));
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'ufront.remoting.RemotingUtil'; }
}
function ufront_remoting_RemotingUtil_0(&$errorHandler, $e) {
	{
		$GLOBALS['%s']->push("ufront.remoting.RemotingUtil::wrapErrorHandler@111");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = Std::is($e, _hx_qtype("ufront.remoting.RemotingError"));
		if($tmp) {
			call_user_func_array($errorHandler, array($e));
		} else {
			$tmp1 = ufront_remoting_RemotingError::RUnknownException($e);
			call_user_func_array($errorHandler, array($tmp1));
		}
		$GLOBALS['%s']->pop();
	}
}
