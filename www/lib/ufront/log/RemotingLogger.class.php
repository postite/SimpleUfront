<?php

// Generated by Haxe 3.3.0
class ufront_log_RemotingLogger implements ufront_app_UFLogHandler{
	public function __construct() { if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.log.RemotingLogger::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}}
	public function log($httpContext, $appMessages) {
		$GLOBALS['%s']->push("ufront.log.RemotingLogger::log");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$this1 = $httpContext->request->get_clientHeaders();
		$name = strtolower("X-Ufront-Remoting");
		$tmp1 = $this1->exists($name);
		if($tmp1) {
			$tmp2 = $httpContext->response->get_contentType();
			$tmp = $tmp2 === "application/x-haxe-remoting";
		} else {
			$tmp = false;
		}
		if($tmp) {
			$results = (new _hx_array(array()));
			{
				$_g = 0;
				$_g1 = $httpContext->messages;
				while($_g < $_g1->length) {
					$msg = $_g1[$_g];
					++$_g;
					$tmp3 = ufront_log_RemotingLogger::formatMessage($msg);
					$results->push($tmp3);
					unset($tmp3,$msg);
				}
			}
			if($appMessages !== null) {
				$_g2 = 0;
				while($_g2 < $appMessages->length) {
					$msg1 = $appMessages[$_g2];
					++$_g2;
					$tmp4 = ufront_log_RemotingLogger::formatMessage($msg1);
					$results->push($tmp4);
					unset($tmp4,$msg1);
				}
			}
			$tmp5 = $results->length > 0;
			if($tmp5) {
				$tmp6 = $results->join("\x0A");
				$httpContext->response->write("\x0A" . _hx_string_or_null($tmp6));
			}
		}
		{
			$tmp2 = ufront_core_SurpriseTools::success();
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function formatMessage($m) {
		$GLOBALS['%s']->push("ufront.log.RemotingLogger::formatMessage");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = Std::string($m->msg);
		$m->msg = "" . _hx_string_or_null($tmp);
		if($m->pos->customParams !== null) {
			$_g = (new _hx_array(array()));
			{
				$_g1 = 0;
				$_g2 = $m->pos->customParams;
				while($_g1 < $_g2->length) {
					$p = $_g2[$_g1];
					++$_g1;
					$tmp1 = Std::string($p);
					$_g->push("" . _hx_string_or_null($tmp1));
					unset($tmp1,$p);
				}
			}
			$m->pos->customParams = $_g;
		}
		$tmp2 = haxe_Serializer::run($m);
		{
			$tmp3 = "hxt" . _hx_string_or_null($tmp2);
			$GLOBALS['%s']->pop();
			return $tmp3;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'ufront.log.RemotingLogger'; }
}
