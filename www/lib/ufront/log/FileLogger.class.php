<?php

// Generated by Haxe 3.3.0
class ufront_log_FileLogger implements ufront_app_UFInitRequired, ufront_app_UFLogHandler{
	public function __construct($path) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.log.FileLogger::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->path = $path;
		$GLOBALS['%s']->pop();
	}}
	public $path;
	public function init($app) {
		$GLOBALS['%s']->push("ufront.log.FileLogger::init");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ufront_core_SurpriseTools::success();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function dispose($app) {
		$GLOBALS['%s']->push("ufront.log.FileLogger::dispose");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->path = null;
		{
			$tmp = ufront_core_SurpriseTools::success();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function log($context, $appMessages) {
		$GLOBALS['%s']->push("ufront.log.FileLogger::log");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $context->get_contentDirectory();
		$logFile = _hx_string_or_null($tmp) . _hx_string_or_null($this->path);
		$req = $context->request;
		$res = $context->response;
		$userDetails = $req->get_clientIP();
		try {
			$tmp1 = null;
			if(null !== $context->session) {
				$tmp1 = $context->session->get_id();
			} else {
				$tmp1 = null;
			}
			if($tmp1 !== null) {
				$tmp2 = null;
				if(null !== $context->session) {
					$tmp2 = $context->session->get_id();
				} else {
					$tmp2 = null;
				}
				$userDetails .= " " . _hx_string_or_null($tmp2);
			}
			$tmp3 = null;
			$tmp4 = null;
			if($context->auth !== null) {
				$tmp5 = $context->auth->get_currentUser();
				$tmp4 = $tmp5 !== null;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $context->auth->get_currentUser()->get_userID();
			} else {
				$tmp3 = null;
			}
			if($tmp3 !== null) {
				$tmp6 = null;
				$tmp7 = null;
				if($context->auth !== null) {
					$tmp8 = $context->auth->get_currentUser();
					$tmp7 = $tmp8 !== null;
				} else {
					$tmp7 = false;
				}
				if($tmp7) {
					$tmp6 = $context->auth->get_currentUser()->get_userID();
				} else {
					$tmp6 = null;
				}
				$userDetails .= " " . _hx_string_or_null($tmp6);
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
			}
		}
		$tmp9 = Date::now();
		$tmp10 = Std::string($tmp9);
		$tmp11 = "" . _hx_string_or_null($tmp10) . " [";
		$tmp12 = $req->get_httpMethod();
		$tmp13 = _hx_string_or_null($tmp11) . _hx_string_or_null($tmp12) . "] [";
		$tmp14 = $req->get_uri();
		$tmp15 = _hx_string_or_null($tmp13) . _hx_string_or_null($tmp14) . "] from [" . _hx_string_or_null($userDetails) . "], response: [" . _hx_string_rec($res->status, "") . " ";
		$tmp16 = $res->get_contentType();
		$content = _hx_string_or_null($tmp15) . _hx_string_or_null($tmp16) . "]\x0A";
		{
			$_g = 0;
			$_g1 = $context->messages;
			while($_g < $_g1->length) {
				$msg = $_g1[$_g];
				++$_g;
				$tmp17 = ufront_log_FileLogger::format($msg);
				$content .= "\x09" . _hx_string_or_null($tmp17) . "\x0A";
				unset($tmp17,$msg);
			}
		}
		if($appMessages !== null) {
			$_g2 = 0;
			while($_g2 < $appMessages->length) {
				$msg1 = $appMessages[$_g2];
				++$_g2;
				$tmp18 = ufront_log_FileLogger::format($msg1);
				$content .= "\x09" . _hx_string_or_null($tmp18) . "\x0A";
				unset($tmp18,$msg1);
			}
		}
		{
			$path = haxe_io_Path::directory($logFile);
			$path1 = haxe_io_Path::addTrailingSlash($path);
			$_p = null;
			$parts = (new _hx_array(array()));
			while(true) {
				$_p = haxe_io_Path::directory($path1);
				if(!($path1 !== $_p)) {
					break;
				}
				$parts->unshift($path1);
				$path1 = $_p;
			}
			{
				$_g3 = 0;
				while($_g3 < $parts->length) {
					$part = $parts[$_g3];
					++$_g3;
					$tmp19 = null;
					$tmp20 = strlen($part) - 1;
					$tmp21 = _hx_char_code_at($part, $tmp20);
					if($tmp21 !== 58) {
						$tmp19 = !file_exists($part);
					} else {
						$tmp19 = false;
					}
					if($tmp19) {
						@mkdir($part, 493);
					}
					unset($tmp21,$tmp20,$tmp19,$part);
				}
			}
		}
		$tmp22 = $context->get_contentDirectory();
		$file = sys_io_File::append(_hx_string_or_null($tmp22) . _hx_string_or_null($this->path), null);
		$file->writeString($content);
		$file->close();
		{
			$tmp2 = ufront_core_SurpriseTools::success();
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function format($msg) {
		$GLOBALS['%s']->push("ufront.log.FileLogger::format");
		$__hx__spos = $GLOBALS['%s']->length;
		$msgStr = Std::string($msg->msg);
		$text = ufront_log_FileLogger::$REMOVENL->replace($msgStr, "\\n");
		$type = _hx_substr(Type::enumConstructor($msg->type), 1, null);
		$pos = $msg->pos;
		{
			$tmp = "[" . _hx_string_or_null($type) . "] " . _hx_string_or_null($pos->className) . "." . _hx_string_or_null($pos->methodName) . "(" . _hx_string_rec($pos->lineNumber, "") . "): " . _hx_string_or_null($text);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $REMOVENL;
	function __toString() { return 'ufront.log.FileLogger'; }
}
ufront_log_FileLogger::$REMOVENL = new EReg("[\x0A\x0D]", "g");
