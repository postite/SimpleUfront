<?php

// Generated by Haxe 3.3.0
class ufront_web_upload_BaseUpload {
	public function __construct($postName, $originalFileName, $size, $contentType = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.web.upload.BaseUpload::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->postName = $postName;
		$this->originalFileName = haxe_io_Path::withoutDirectory($originalFileName);
		$this->size = $size;
		$this->contentType = $contentType;
		$GLOBALS['%s']->pop();
	}}
	public $postName;
	public $originalFileName;
	public $size;
	public $contentType;
	public $attachedUpload;
	public function hxSerialize($s) {
		$GLOBALS['%s']->push("ufront.web.upload.BaseUpload::hxSerialize");
		$__hx__spos = $GLOBALS['%s']->length;
		$rs = Std::instance($s, _hx_qtype("ufront.remoting.RemotingSerializer"));
		$attachingUpload = null;
		if($rs !== null) {
			if($rs->direction->index === 0) {
				$attachingUpload = true;
			} else {
				$attachingUpload = false;
			}
		} else {
			$attachingUpload = false;
		}
		$s->serialize($attachingUpload);
		if($attachingUpload) {
			$tmp = Std::is($this, _hx_qtype("ufront.web.upload.UFFileUpload"));
			if($tmp === false) {
				throw new HException("BaseUpload can only be serialized if the sub-class matches the UFFileUpload interface");
			}
			$tmp1 = _hx_string_or_null($this->postName) . "_";
			$tmp2 = ufront_core_Uuid::create();
			$uniquePostName = _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2);
			ufront_core__MultiValueMap_MultiValueMap_Impl_::add($rs->uploads, $uniquePostName, $this);
			$s->serialize($uniquePostName);
		}
		$s->serialize($this->postName);
		$s->serialize($this->originalFileName);
		$s->serialize($this->size);
		$s->serialize($this->contentType);
		$GLOBALS['%s']->pop();
	}
	public function hxUnserialize($s) {
		$GLOBALS['%s']->push("ufront.web.upload.BaseUpload::hxUnserialize");
		$__hx__spos = $GLOBALS['%s']->length;
		$uploadAttached = $s->unserialize();
		$rs = Std::instance($s, _hx_qtype("ufront.remoting.RemotingUnserializer"));
		if($uploadAttached) {
			if($rs === null) {
				throw new HException("Unable to Unserialize upload. It was serialized with RemotingSerializer, it must be unserialized with RemotingUnserializer");
			}
			$uniquePostName = $s->unserialize();
			$tmp = $rs->uploads->exists($uniquePostName);
			if($tmp) {
				$this->attachedUpload = ufront_core__MultiValueMap_MultiValueMap_Impl_::get($rs->uploads, $uniquePostName);
			} else {
				throw new HException("Unable to find upload attached as " . _hx_string_or_null($uniquePostName));
			}
		}
		$this->postName = $s->unserialize();
		$this->originalFileName = $s->unserialize();
		$this->size = $s->unserialize();
		$this->contentType = $s->unserialize();
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'ufront.web.upload.BaseUpload'; }
}
