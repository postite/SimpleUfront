<?php

// Generated by Haxe 3.3.0
class ufront_web_MVCHandler implements ufront_app_UFRequestHandler{
	public function __construct($indexController) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.web.MVCHandler::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->indexController = $indexController;
		$GLOBALS['%s']->pop();
	}}
	public $indexController;
	public function handleRequest($ctx) {
		$GLOBALS['%s']->push("ufront.web.MVCHandler::handleRequest");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = $this->processRequest($ctx);
		{
			$tmp2 = tink_core__Future_Future_Impl_::_tryFailingFlatMap($tmp, array(new _hx_lambda(array(&$_gthis, &$ctx), "ufront_web_MVCHandler_0"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function processRequest($context) {
		$GLOBALS['%s']->push("ufront.web.MVCHandler::processRequest");
		$__hx__spos = $GLOBALS['%s']->length;
		$context->actionContext->handler = $this;
		$controller = $context->injector->_instantiate($this->indexController);
		$tmp = $controller->execute();
		$resultFuture = tink_core__Future_Future_Impl_::_tryMap($tmp, array(new _hx_lambda(array(&$context), "ufront_web_MVCHandler_1"), 'execute'));
		{
			$GLOBALS['%s']->pop();
			return $resultFuture;
		}
		$GLOBALS['%s']->pop();
	}
	public function executeResult($context) {
		$GLOBALS['%s']->push("ufront.web.MVCHandler::executeResult");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			{
				$tmp = $context->actionContext->actionResult->executeResult($context->actionContext);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$p_customParams = (new _hx_array(array("actionContext")));
				$tmp = Type::getClass($context->actionContext);
				{
					$tmp1 = "Caught error in MVCHandler.executeResult while executing " . _hx_string_or_null(Type::getClassName($tmp)) . "." . "executeResult" . "(";
					$tmp2 = $p_customParams->join(",");
					$context->messages->push(_hx_anonymous(array("msg" => _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2) . ")", "pos" => _hx_anonymous(array("fileName" => "MVCHandler.hx", "lineNumber" => 69, "className" => "ufront.web.MVCHandler", "methodName" => "executeResult")), "type" => ufront_log_MessageType::$MError)));
				}
				$tmp3 = ufront_web_HttpError::wrap($e, null, _hx_anonymous(array("fileName" => "MVCHandler.hx", "lineNumber" => 70, "className" => "ufront.web.MVCHandler", "methodName" => "executeResult")));
				$tmp4 = tink_core_Outcome::Failure($tmp3);
				{
					$tmp2 = tink_core__Future_Future_Impl_::sync($tmp4);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("ufront.web.MVCHandler::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return "ufront.web.MVCHandler";
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
function ufront_web_MVCHandler_0(&$_gthis, &$ctx, $r) {
	{
		$GLOBALS['%s']->push("ufront.web.MVCHandler::handleRequest@47");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $_gthis->executeResult($ctx);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_web_MVCHandler_1(&$context, $result) {
	{
		$GLOBALS['%s']->push("ufront.web.MVCHandler::processRequest@55");
		$__hx__spos = $GLOBALS['%s']->length;
		$context->actionContext->actionResult = $result;
		{
			$tmp = tink_core_Noise::$Noise;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
