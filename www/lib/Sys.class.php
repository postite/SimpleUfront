<?php

// Generated by Haxe 3.3.0
class Sys {
	public function __construct(){}
	static function hprint($v) {
		$GLOBALS['%s']->push("Sys::print");
		$__hx__spos = $GLOBALS['%s']->length;
		echo(Std::string($v));
		$GLOBALS['%s']->pop();
	}
	static function println($v) {
		$GLOBALS['%s']->push("Sys::println");
		$__hx__spos = $GLOBALS['%s']->length;
		Sys::hprint($v);
		Sys::hprint("\x0A");
		$GLOBALS['%s']->pop();
	}
	static function args() {
		$GLOBALS['%s']->push("Sys::args");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = array_key_exists("argv", $_SERVER);
		if($tmp) {
			$tmp2 = new _hx_array(array_slice($_SERVER["argv"], 1));
			$GLOBALS['%s']->pop();
			return $tmp2;
		} else {
			$tmp2 = (new _hx_array(array()));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function getEnv($s) {
		$GLOBALS['%s']->push("Sys::getEnv");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = getenv($s);
		if(_hx_equal($ret, false)) {
			$GLOBALS['%s']->pop();
			return null;
		} else {
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	static function putEnv($s, $v) {
		$GLOBALS['%s']->push("Sys::putEnv");
		$__hx__spos = $GLOBALS['%s']->length;
		putenv(_hx_string_or_null($s) . "=" . _hx_string_or_null($v));
		{
			$GLOBALS['%s']->pop();
			return;
		}
		$GLOBALS['%s']->pop();
	}
	static function sleep($seconds) {
		$GLOBALS['%s']->push("Sys::sleep");
		$__hx__spos = $GLOBALS['%s']->length;
		usleep($seconds * 1000000);
		{
			$GLOBALS['%s']->pop();
			return;
		}
		$GLOBALS['%s']->pop();
	}
	static function setTimeLocale($loc) {
		$GLOBALS['%s']->push("Sys::setTimeLocale");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = setlocale(LC_TIME, $loc);
		{
			$tmp2 = $tmp !== false;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function getCwd() {
		$GLOBALS['%s']->push("Sys::getCwd");
		$__hx__spos = $GLOBALS['%s']->length;
		$cwd = getcwd();
		$l = _hx_substr($cwd, -1, null);
		$tmp = null;
		$tmp1 = null;
		if($l !== "/") {
			$tmp1 = $l === "\\";
		} else {
			$tmp1 = true;
		}
		if($tmp1) {
			$tmp = "";
		} else {
			$tmp = "/";
		}
		{
			$tmp2 = _hx_string_or_null($cwd) . _hx_string_or_null($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function setCwd($s) {
		$GLOBALS['%s']->push("Sys::setCwd");
		$__hx__spos = $GLOBALS['%s']->length;
		chdir($s);
		$GLOBALS['%s']->pop();
	}
	static function systemName() {
		$GLOBALS['%s']->push("Sys::systemName");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = php_uname("s");
		$p = _hx_index_of($s, " ", null);
		if($p >= 0) {
			$tmp = _hx_substr($s, 0, $p);
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return $s;
		}
		$GLOBALS['%s']->pop();
	}
	static function command($cmd, $args = null) {
		$GLOBALS['%s']->push("Sys::command");
		$__hx__spos = $GLOBALS['%s']->length;
		if($args !== null) {
			$_g = Sys::systemName();
			if($_g === "Windows") {
				$_g1 = (new _hx_array(array()));
				{
					$_g11 = 0;
					$tmp = str_replace("/", "\\", $cmd);
					$_g2 = _hx_deref((new _hx_array(array($tmp))))->concat($args);
					while($_g11 < $_g2->length) {
						$a = $_g2[$_g11];
						++$_g11;
						$tmp1 = StringTools::quoteWinArg($a, true);
						$_g1->push($tmp1);
						unset($tmp1,$a);
					}
				}
				$cmd = $_g1->join(" ");
			} else {
				$cmd = _hx_deref((new _hx_array(array($cmd))))->concat($args)->map((isset(StringTools::$quoteUnixArg) ? StringTools::$quoteUnixArg: array("StringTools", "quoteUnixArg")))->join(" ");
			}
		}
		$result = 0;
		system($cmd, $result);
		{
			$GLOBALS['%s']->pop();
			return $result;
		}
		$GLOBALS['%s']->pop();
	}
	static function hexit($code) {
		$GLOBALS['%s']->push("Sys::exit");
		$__hx__spos = $GLOBALS['%s']->length;
		exit($code);
		$GLOBALS['%s']->pop();
	}
	static function time() {
		$GLOBALS['%s']->push("Sys::time");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = microtime(true);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function cpuTime() {
		$GLOBALS['%s']->push("Sys::cpuTime");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = microtime(true);
		$tmp1 = $_SERVER['REQUEST_TIME'];
		{
			$tmp2 = $tmp - $tmp1;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function executablePath() {
		$GLOBALS['%s']->push("Sys::executablePath");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $_SERVER['SCRIPT_FILENAME'];
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $_programPath;
	static function programPath() {
		$GLOBALS['%s']->push("Sys::programPath");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Sys::$_programPath;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function environment() {
		$GLOBALS['%s']->push("Sys::environment");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $_SERVER;
		{
			$tmp2 = php_Lib::hashOfAssociativeArray($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function stdin() {
		$GLOBALS['%s']->push("Sys::stdin");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = fopen("php://stdin", "r");
		{
			$tmp2 = new sys_io_FileInput($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function stdout() {
		$GLOBALS['%s']->push("Sys::stdout");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = fopen("php://stdout", "w");
		{
			$tmp2 = new sys_io_FileOutput($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function stderr() {
		$GLOBALS['%s']->push("Sys::stderr");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = fopen("php://stderr", "w");
		{
			$tmp2 = new sys_io_FileOutput($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function getChar($echo) {
		$GLOBALS['%s']->push("Sys::getChar");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = fgetc(STDIN);
		if($echo) {
			echo($v);
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'Sys'; }
}
Sys::$_programPath = Sys_0();
function Sys_0() {
	{
		$relPath = $_SERVER['SCRIPT_FILENAME'];
		$p = realpath($relPath);
		$tmp = ($p === false);
		if($tmp) {
			return null;
		} else {
			return $p;
		}
		unset($tmp,$relPath,$p);
	}
}
