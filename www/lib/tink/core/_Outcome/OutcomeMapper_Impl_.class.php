<?php

// Generated by Haxe 3.3.0
class tink_core__Outcome_OutcomeMapper_Impl_ {
	public function __construct(){}
	static function _new($f) {
		$GLOBALS['%s']->push("tink.core._Outcome.OutcomeMapper_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_anonymous(array("f" => $f));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function apply($this1, $o) {
		$GLOBALS['%s']->push("tink.core._Outcome.OutcomeMapper_Impl_::apply");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->f($o);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function withSameError($f) {
		$GLOBALS['%s']->push("tink.core._Outcome.OutcomeMapper_Impl_::withSameError");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core__Outcome_OutcomeMapper_Impl_::_new(array(new _hx_lambda(array(&$f), "tink_core__Outcome_OutcomeMapper_Impl__0"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function withEitherError($f) {
		$GLOBALS['%s']->push("tink.core._Outcome.OutcomeMapper_Impl_::withEitherError");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core__Outcome_OutcomeMapper_Impl_::_new(array(new _hx_lambda(array(&$f), "tink_core__Outcome_OutcomeMapper_Impl__1"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.core._Outcome.OutcomeMapper_Impl_'; }
}
function tink_core__Outcome_OutcomeMapper_Impl__0(&$f, $o) {
	{
		$GLOBALS['%s']->push("tink.core._Outcome.OutcomeMapper_Impl_::withSameError@102");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $o->index;
		switch($tmp) {
		case 0:{
			$tmp2 = call_user_func_array($f, array(_hx_deref($o)->params[0]));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 1:{
			$tmp2 = tink_core_Outcome::Failure(_hx_deref($o)->params[0]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Outcome_OutcomeMapper_Impl__1(&$f, $o) {
	{
		$GLOBALS['%s']->push("tink.core._Outcome.OutcomeMapper_Impl_::withEitherError@111");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $o->index;
		switch($tmp) {
		case 0:{
			$_g = call_user_func_array($f, array(_hx_deref($o)->params[0]));
			$tmp1 = $_g->index;
			switch($tmp1) {
			case 0:{
				$tmp2 = tink_core_Outcome::Success(_hx_deref($_g)->params[0]);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 1:{
				$tmp2 = tink_core_Either::Right(_hx_deref($_g)->params[0]);
				{
					$tmp3 = tink_core_Outcome::Failure($tmp2);
					$GLOBALS['%s']->pop();
					return $tmp3;
				}
			}break;
			}
		}break;
		case 1:{
			$tmp3 = tink_core_Either::Left(_hx_deref($o)->params[0]);
			{
				$tmp2 = tink_core_Outcome::Failure($tmp3);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
