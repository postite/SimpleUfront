<?php

// Generated by Haxe 3.3.0
class php__BytesData_BytesData_Impl_ {
	public function __construct(){}
	static function _new($x) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $x;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function str($this1) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::str");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->s;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function setNativeString($this1, $val) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::setNativeString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1->s = $val;
		$GLOBALS['%s']->pop();
	}
	static function get_length($this1) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::get_length");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = strlen($this1->s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function wrap($s) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::wrap");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new php__BytesData_Wrapper($s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofNativeString($s) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::ofNativeString");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = new php__BytesData_Wrapper($s);
		{
			$tmp = $x;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function set($this1, $index, $val) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::set");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1->s[$index] = chr($val);
		$GLOBALS['%s']->pop();
	}
	static function compare($this1, $other) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::compare");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->s < $other->s ? -1 : ($this1->s == $other->s ? 0 : 1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function get($this1, $pos) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::get");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ord($this1->s[$pos]);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function copy($this1) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::copy");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = new php__BytesData_Wrapper($this1->s);
		{
			$tmp = $x;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getString($this1, $pos, $len) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::getString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = substr($this1->s, $pos, $len);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function sub($this1, $pos, $len) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::sub");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = substr($this1->s, $pos, $len);
		$x = new php__BytesData_Wrapper($s);
		$this2 = $x;
		{
			$tmp = $this2;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function blit($this1, $pos, $src, $srcpos, $len) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::blit");
		$__hx__spos = $GLOBALS['%s']->length;
		$val = substr($this1->s, 0, $pos) . substr($src->s, $srcpos, $len) . substr($this1->s, $pos+$len);
		$this1->s = $val;
		$GLOBALS['%s']->pop();
	}
	static function toString($this1) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->s;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofString($s) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::ofString");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = new php__BytesData_Wrapper($s);
		{
			$tmp = $x;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function alloc($length) {
		$GLOBALS['%s']->push("php._BytesData.BytesData_Impl_::alloc");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = str_repeat(chr(0), $length);
		$x = new php__BytesData_Wrapper($s);
		$this1 = $x;
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return 'php._BytesData.BytesData_Impl_'; }
}
