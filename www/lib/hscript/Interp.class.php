<?php

// Generated by Haxe 3.3.0
class hscript_Interp {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("hscript.Interp::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->variables = new haxe_ds_StringMap();
		$this->locals = new haxe_ds_StringMap();
		$this->declared = new _hx_array(array());
		$this->variables->set("null", null);
		$this->variables->set("true", true);
		$this->variables->set("false", false);
		$this->variables->set("trace", array(new _hx_lambda(array(), "hscript_Interp_0"), 'execute'));
		$this->initOps();
		$GLOBALS['%s']->pop();
	}}
	public $variables;
	public $locals;
	public $binops;
	public $depth;
	public $inTry;
	public $declared;
	public function initOps() {
		$GLOBALS['%s']->push("hscript.Interp::initOps");
		$__hx__spos = $GLOBALS['%s']->length;
		$me = $this;
		$this->binops = new haxe_ds_StringMap();
		$this->binops->set("+", array(new _hx_lambda(array(&$me), "hscript_Interp_1"), 'execute'));
		$this->binops->set("-", array(new _hx_lambda(array(&$me), "hscript_Interp_2"), 'execute'));
		$this->binops->set("*", array(new _hx_lambda(array(&$me), "hscript_Interp_3"), 'execute'));
		$this->binops->set("/", array(new _hx_lambda(array(&$me), "hscript_Interp_4"), 'execute'));
		$this->binops->set("%", array(new _hx_lambda(array(&$me), "hscript_Interp_5"), 'execute'));
		$this->binops->set("&", array(new _hx_lambda(array(&$me), "hscript_Interp_6"), 'execute'));
		$this->binops->set("|", array(new _hx_lambda(array(&$me), "hscript_Interp_7"), 'execute'));
		$this->binops->set("^", array(new _hx_lambda(array(&$me), "hscript_Interp_8"), 'execute'));
		$this->binops->set("<<", array(new _hx_lambda(array(&$me), "hscript_Interp_9"), 'execute'));
		$this->binops->set(">>", array(new _hx_lambda(array(&$me), "hscript_Interp_10"), 'execute'));
		$this->binops->set(">>>", array(new _hx_lambda(array(&$me), "hscript_Interp_11"), 'execute'));
		$this->binops->set("==", array(new _hx_lambda(array(&$me), "hscript_Interp_12"), 'execute'));
		$this->binops->set("!=", array(new _hx_lambda(array(&$me), "hscript_Interp_13"), 'execute'));
		$this->binops->set(">=", array(new _hx_lambda(array(&$me), "hscript_Interp_14"), 'execute'));
		$this->binops->set("<=", array(new _hx_lambda(array(&$me), "hscript_Interp_15"), 'execute'));
		$this->binops->set(">", array(new _hx_lambda(array(&$me), "hscript_Interp_16"), 'execute'));
		$this->binops->set("<", array(new _hx_lambda(array(&$me), "hscript_Interp_17"), 'execute'));
		$this->binops->set("||", array(new _hx_lambda(array(&$me), "hscript_Interp_18"), 'execute'));
		$this->binops->set("&&", array(new _hx_lambda(array(&$me), "hscript_Interp_19"), 'execute'));
		$this->binops->set("=", (isset($this->assign) ? $this->assign: array($this, "assign")));
		$this->binops->set("...", array(new _hx_lambda(array(&$me), "hscript_Interp_20"), 'execute'));
		$this->assignOp("+=", array(new _hx_lambda(array(), "hscript_Interp_21"), 'execute'));
		$this->assignOp("-=", array(new _hx_lambda(array(), "hscript_Interp_22"), 'execute'));
		$this->assignOp("*=", array(new _hx_lambda(array(), "hscript_Interp_23"), 'execute'));
		$this->assignOp("/=", array(new _hx_lambda(array(), "hscript_Interp_24"), 'execute'));
		$this->assignOp("%=", array(new _hx_lambda(array(), "hscript_Interp_25"), 'execute'));
		$this->assignOp("&=", array(new _hx_lambda(array(), "hscript_Interp_26"), 'execute'));
		$this->assignOp("|=", array(new _hx_lambda(array(), "hscript_Interp_27"), 'execute'));
		$this->assignOp("^=", array(new _hx_lambda(array(), "hscript_Interp_28"), 'execute'));
		$this->assignOp("<<=", array(new _hx_lambda(array(), "hscript_Interp_29"), 'execute'));
		$this->assignOp(">>=", array(new _hx_lambda(array(), "hscript_Interp_30"), 'execute'));
		$this->assignOp(">>>=", array(new _hx_lambda(array(), "hscript_Interp_31"), 'execute'));
		$GLOBALS['%s']->pop();
	}
	public function assign($e1, $e2) {
		$GLOBALS['%s']->push("hscript.Interp::assign");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = $this->expr($e2);
		$tmp = $e1->index;
		switch($tmp) {
		case 1:{
			$id = _hx_deref($e1)->params[0];
			{
				$l = $this->locals->get($id);
				if($l === null) {
					$this->variables->set($id, $v);
				} else {
					$l->r = $v;
				}
			}
		}break;
		case 5:{
			$f = _hx_deref($e1)->params[1];
			$tmp1 = $this->expr(_hx_deref($e1)->params[0]);
			$v = $this->set($tmp1, $f, $v);
		}break;
		case 16:{
			$index = _hx_deref($e1)->params[1];
			$tmp2 = $this->expr(_hx_deref($e1)->params[0]);
			$tmp3 = $this->expr($index);
			$tmp2[$tmp3] = $v;
		}break;
		default:{
			$e = hscript_Error::EInvalidOp("=");
			throw new HException($e);
		}break;
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function assignOp($op, $fop) {
		$GLOBALS['%s']->push("hscript.Interp::assignOp");
		$__hx__spos = $GLOBALS['%s']->length;
		$me = $this;
		$this->binops->set($op, array(new _hx_lambda(array(&$fop, &$me, &$op), "hscript_Interp_32"), 'execute'));
		$GLOBALS['%s']->pop();
	}
	public function evalAssignOp($op, $fop, $e1, $e2) {
		$GLOBALS['%s']->push("hscript.Interp::evalAssignOp");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		$tmp = $e1->index;
		switch($tmp) {
		case 1:{
			$id = _hx_deref($e1)->params[0];
			{
				$l = $this->locals->get($id);
				$tmp1 = $this->expr($e1);
				$tmp2 = $this->expr($e2);
				$v = call_user_func_array($fop, array($tmp1, $tmp2));
				if($l === null) {
					$this->variables->set($id, $v);
				} else {
					$l->r = $v;
				}
			}
		}break;
		case 5:{
			$f = _hx_deref($e1)->params[1];
			{
				$obj = $this->expr(_hx_deref($e1)->params[0]);
				$tmp3 = $this->get($obj, $f);
				$tmp4 = $this->expr($e2);
				$v = call_user_func_array($fop, array($tmp3, $tmp4));
				$v = $this->set($obj, $f, $v);
			}
		}break;
		case 16:{
			$arr = $this->expr(_hx_deref($e1)->params[0]);
			$index = $this->expr(_hx_deref($e1)->params[1]);
			$tmp5 = $arr[$index];
			$tmp6 = $this->expr($e2);
			$v = call_user_func_array($fop, array($tmp5, $tmp6));
			$arr[$index] = $v;
		}break;
		default:{
			$e = hscript_Error::EInvalidOp($op);
			throw new HException($e);
		}break;
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function increment($e, $prefix, $delta) {
		$GLOBALS['%s']->push("hscript.Interp::increment");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $e->index;
		switch($tmp) {
		case 1:{
			$id = _hx_deref($e)->params[0];
			$l = $this->locals->get($id);
			$v = null;
			if($l === null) {
				$v = $this->variables->get($id);
			} else {
				$v = $l->r;
			}
			if($prefix) {
				$v += $delta;
				if($l === null) {
					$this->variables->set($id, $v);
				} else {
					$l->r = $v;
				}
			} else {
				if($l === null) {
					$this->variables->set($id, $v + $delta);
				} else {
					$l->r = $v + $delta;
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		}break;
		case 5:{
			$f = _hx_deref($e)->params[1];
			$obj = $this->expr(_hx_deref($e)->params[0]);
			$v1 = $this->get($obj, $f);
			if($prefix) {
				$v1 += $delta;
				$this->set($obj, $f, $v1);
			} else {
				$this->set($obj, $f, $v1 + $delta);
			}
			{
				$GLOBALS['%s']->pop();
				return $v1;
			}
		}break;
		case 16:{
			$index = _hx_deref($e)->params[1];
			$arr = $this->expr(_hx_deref($e)->params[0]);
			$index1 = $this->expr($index);
			$v2 = $arr[$index1];
			if($prefix) {
				$v2 += $delta;
				$arr[$index1] = $v2;
			} else {
				$arr[$index1] = $v2 + $delta;
			}
			{
				$GLOBALS['%s']->pop();
				return $v2;
			}
		}break;
		default:{
			$tmp1 = null;
			if($delta > 0) {
				$tmp1 = "++";
			} else {
				$tmp1 = "--";
			}
			$e1 = hscript_Error::EInvalidOp($tmp1);
			throw new HException($e1);
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute($expr) {
		$GLOBALS['%s']->push("hscript.Interp::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->depth = 0;
		$this->locals = new haxe_ds_StringMap();
		$this->declared = new _hx_array(array());
		{
			$tmp = $this->exprReturn($expr);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function exprReturn($e) {
		$GLOBALS['%s']->push("hscript.Interp::exprReturn");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			{
				$tmp = $this->expr($e);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e1 = $_ex_) instanceof hscript__Interp_Stop){
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				switch($e1->index) {
				case 0:{
					throw new HException("Invalid break");
				}break;
				case 1:{
					throw new HException("Invalid continue");
				}break;
				case 2:{
					$tmp = _hx_deref($e1)->params[0];
					$GLOBALS['%s']->pop();
					return $tmp;
				}break;
				}
			} else throw $__hx__e;;
		}
		$GLOBALS['%s']->pop();
	}
	public function duplicate($h) {
		$GLOBALS['%s']->push("hscript.Interp::duplicate");
		$__hx__spos = $GLOBALS['%s']->length;
		$h2 = new haxe_ds_StringMap();
		{
			$tmp = $h->keys();
			while(true) {
				$tmp1 = !$tmp->hasNext();
				if($tmp1) {
					break;
				}
				$k = $tmp->next();
				$value = $h->get($k);
				$h2->set($k, $value);
				unset($value,$tmp1,$k);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $h2;
		}
		$GLOBALS['%s']->pop();
	}
	public function restore($old) {
		$GLOBALS['%s']->push("hscript.Interp::restore");
		$__hx__spos = $GLOBALS['%s']->length;
		while($this->declared->length > $old) {
			$d = $this->declared->pop();
			$this->locals->set($d->n, $d->old);
			unset($d);
		}
		$GLOBALS['%s']->pop();
	}
	public function edef($e) {
		$GLOBALS['%s']->push("hscript.Interp::edef");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $e;
		}
		$GLOBALS['%s']->pop();
	}
	public function error($e) {
		$GLOBALS['%s']->push("hscript.Interp::error");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException($e);
		$GLOBALS['%s']->pop();
	}
	public function resolve($id) {
		$GLOBALS['%s']->push("hscript.Interp::resolve");
		$__hx__spos = $GLOBALS['%s']->length;
		$l = $this->locals->get($id);
		if($l !== null) {
			$tmp = $l->r;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$v = $this->variables->get($id);
		$tmp = null;
		if($v === null) {
			$tmp = !$this->variables->exists($id);
		} else {
			$tmp = false;
		}
		if($tmp) {
			$e = hscript_Error::EUnknownVariable($id);
			throw new HException($e);
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function expr($e) {
		$GLOBALS['%s']->push("hscript.Interp::expr");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = $e->index;
		switch($tmp) {
		case 0:{
			$c = _hx_deref($e)->params[0];
			switch($c->index) {
			case 0:{
				$tmp2 = _hx_deref($c)->params[0];
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 1:{
				$tmp2 = _hx_deref($c)->params[0];
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 2:{
				$tmp2 = _hx_deref($c)->params[0];
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			}
		}break;
		case 1:{
			$tmp2 = $this->resolve(_hx_deref($e)->params[0]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 2:{
			$e1 = _hx_deref($e)->params[2];
			$n = _hx_deref($e)->params[0];
			$this->declared->push(_hx_anonymous(array("n" => $n, "old" => $this->locals->get($n))));
			{
				$tmp1 = null;
				if($e1 === null) {
					$tmp1 = null;
				} else {
					$tmp1 = $this->expr($e1);
				}
				$this->locals->set($n, _hx_anonymous(array("r" => $tmp1)));
			}
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		case 3:{
			$tmp2 = $this->expr(_hx_deref($e)->params[0]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 4:{
			$exprs = _hx_deref($e)->params[0];
			$old = $this->declared->length;
			$v = null;
			{
				$_g = 0;
				while($_g < $exprs->length) {
					$e2 = $exprs[$_g];
					++$_g;
					$v = $this->expr($e2);
					unset($e2);
				}
			}
			$this->restore($old);
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		}break;
		case 5:{
			$f = _hx_deref($e)->params[1];
			$tmp2 = $this->expr(_hx_deref($e)->params[0]);
			{
				$tmp3 = $this->get($tmp2, $f);
				$GLOBALS['%s']->pop();
				return $tmp3;
			}
		}break;
		case 6:{
			$e21 = _hx_deref($e)->params[2];
			$e11 = _hx_deref($e)->params[1];
			$op = _hx_deref($e)->params[0];
			$fop = $this->binops->get($op);
			if($fop === null) {
				$e3 = hscript_Error::EInvalidOp($op);
				throw new HException($e3);
			}
			{
				$tmp2 = call_user_func_array($fop, array($e11, $e21));
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 7:{
			$e4 = _hx_deref($e)->params[2];
			$prefix = _hx_deref($e)->params[1];
			$op1 = _hx_deref($e)->params[0];
			switch($op1) {
			case "!":{
				$tmp3 = $this->expr($e4);
				{
					$tmp2 = !_hx_equal($tmp3, true);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}break;
			case "++":{
				$tmp2 = $this->increment($e4, $prefix, 1);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case "-":{
				$tmp2 = -$this->expr($e4);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case "--":{
				$tmp2 = $this->increment($e4, $prefix, -1);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case "~":{
				$tmp2 = ~$this->expr($e4);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			default:{
				$e5 = hscript_Error::EInvalidOp($op1);
				throw new HException($e5);
			}break;
			}
		}break;
		case 8:{
			$params = _hx_deref($e)->params[1];
			$e6 = _hx_deref($e)->params[0];
			$args = new _hx_array(array());
			{
				$_g1 = 0;
				while($_g1 < $params->length) {
					$p = $params[$_g1];
					++$_g1;
					$tmp4 = $this->expr($p);
					$args->push($tmp4);
					unset($tmp4,$p);
				}
			}
			$tmp5 = $e6->index === 5;
			if($tmp5) {
				$f1 = _hx_deref($e6)->params[1];
				$obj = $this->expr(_hx_deref($e6)->params[0]);
				if($obj === null) {
					$e7 = hscript_Error::EInvalidAccess($f1);
					throw new HException($e7);
				}
				{
					$tmp2 = $this->fcall($obj, $f1, $args);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			} else {
				$tmp6 = $this->expr($e6);
				{
					$tmp2 = $this->call(null, $tmp6, $args);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}
		}break;
		case 9:{
			$e22 = _hx_deref($e)->params[2];
			$e12 = _hx_deref($e)->params[1];
			$tmp7 = $this->expr(_hx_deref($e)->params[0]);
			if(_hx_equal($tmp7, true)) {
				$tmp2 = $this->expr($e12);
				$GLOBALS['%s']->pop();
				return $tmp2;
			} else {
				if($e22 === null) {
					$GLOBALS['%s']->pop();
					return null;
				} else {
					$tmp2 = $this->expr($e22);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}
		}break;
		case 10:{
			$this->whileLoop(_hx_deref($e)->params[0], _hx_deref($e)->params[1]);
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		case 11:{
			$this->forLoop(_hx_deref($e)->params[0], _hx_deref($e)->params[1], _hx_deref($e)->params[2]);
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		case 12:{
			throw new HException(hscript__Interp_Stop::$SBreak);
		}break;
		case 13:{
			throw new HException(hscript__Interp_Stop::$SContinue);
		}break;
		case 14:{
			$name = _hx_deref($e)->params[2];
			$fexpr = _hx_deref($e)->params[1];
			$params1 = _hx_deref($e)->params[0];
			$capturedLocals = $this->duplicate($this->locals);
			$me = $this;
			$minParams = 0;
			{
				$_g2 = 0;
				while($_g2 < $params1->length) {
					$p1 = $params1[$_g2];
					++$_g2;
					if(!$p1->opt) {
						++$minParams;
					}
					unset($p1);
				}
			}
			$f2 = array(new _hx_lambda(array(&$_gthis, &$capturedLocals, &$fexpr, &$me, &$minParams, &$name, &$params1), "hscript_Interp_33"), 'execute');
			$f3 = Reflect::makeVarArgs($f2);
			if($name !== null) {
				$tmp16 = $this->depth === 0;
				if($tmp16) {
					$this->variables->set($name, $f3);
				} else {
					$this->declared->push(_hx_anonymous(array("n" => $name, "old" => $this->locals->get($name))));
					$ref = _hx_anonymous(array("r" => $f3));
					$this->locals->set($name, $ref);
					$capturedLocals->set($name, $ref);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $f3;
			}
		}break;
		case 15:{
			$e9 = _hx_deref($e)->params[0];
			$tmp17 = null;
			if($e9 === null) {
				$tmp17 = null;
			} else {
				$tmp17 = $this->expr($e9);
			}
			throw new HException(hscript__Interp_Stop::SReturn($tmp17));
		}break;
		case 16:{
			$index = _hx_deref($e)->params[1];
			$tmp18 = $this->expr(_hx_deref($e)->params[0]);
			$tmp19 = $this->expr($index);
			{
				$tmp2 = $tmp18[$tmp19];
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 17:{
			$arr = _hx_deref($e)->params[0];
			$a = new _hx_array(array());
			{
				$_g5 = 0;
				while($_g5 < $arr->length) {
					$e10 = $arr[$_g5];
					++$_g5;
					$tmp20 = $this->expr($e10);
					$a->push($tmp20);
					unset($tmp20,$e10);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $a;
			}
		}break;
		case 18:{
			$params2 = _hx_deref($e)->params[1];
			$cl = _hx_deref($e)->params[0];
			$a1 = new _hx_array(array());
			{
				$_g6 = 0;
				while($_g6 < $params2->length) {
					$e13 = $params2[$_g6];
					++$_g6;
					$tmp21 = $this->expr($e13);
					$a1->push($tmp21);
					unset($tmp21,$e13);
				}
			}
			{
				$tmp2 = $this->cnew($cl, $a1);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 19:{
			throw new HException($this->expr(_hx_deref($e)->params[0]));
		}break;
		case 20:{
			$ecatch = _hx_deref($e)->params[3];
			$n1 = _hx_deref($e)->params[1];
			$e14 = _hx_deref($e)->params[0];
			$old2 = $this->declared->length;
			$oldTry = $this->inTry;
			try {
				$this->inTry = true;
				$v1 = $this->expr($e14);
				$this->restore($old2);
				$this->inTry = $oldTry;
				{
					$GLOBALS['%s']->pop();
					return $v1;
				}
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(($err = $_ex_) instanceof hscript__Interp_Stop){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$this->inTry = $oldTry;
					throw new HException($err);
				}
				else { $err1 = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$this->restore($old2);
					$this->inTry = $oldTry;
					$this->declared->push(_hx_anonymous(array("n" => $n1, "old" => $this->locals->get($n1))));
					$this->locals->set($n1, _hx_anonymous(array("r" => $err1)));
					$v2 = $this->expr($ecatch);
					$this->restore($old2);
					{
						$GLOBALS['%s']->pop();
						return $v2;
					}
				}}
			}
		}break;
		case 21:{
			$fl = _hx_deref($e)->params[0];
			$o = _hx_anonymous(array());
			{
				$_g7 = 0;
				while($_g7 < $fl->length) {
					$f4 = $fl[$_g7];
					++$_g7;
					$tmp22 = $this->expr($f4->e);
					$this->set($o, $f4->name, $tmp22);
					unset($tmp22,$f4);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $o;
			}
		}break;
		case 22:{
			$e23 = _hx_deref($e)->params[2];
			$e15 = _hx_deref($e)->params[1];
			$tmp23 = $this->expr(_hx_deref($e)->params[0]);
			if(_hx_equal($tmp23, true)) {
				$tmp2 = $this->expr($e15);
				$GLOBALS['%s']->pop();
				return $tmp2;
			} else {
				$tmp2 = $this->expr($e23);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 23:{
			$def = _hx_deref($e)->params[2];
			$cases = _hx_deref($e)->params[1];
			$val = $this->expr(_hx_deref($e)->params[0]);
			$match = false;
			{
				$_g8 = 0;
				while($_g8 < $cases->length) {
					$c1 = $cases[$_g8];
					++$_g8;
					{
						$_g12 = 0;
						$_g21 = $c1->values;
						while($_g12 < $_g21->length) {
							$v3 = $_g21[$_g12];
							++$_g12;
							$tmp24 = $this->expr($v3);
							if(_hx_equal($tmp24, $val)) {
								$match = true;
								break;
							}
							unset($v3,$tmp24);
						}
						unset($_g21,$_g12);
					}
					if($match) {
						$val = $this->expr($c1->expr);
						break;
					}
					unset($c1);
				}
			}
			if(!$match) {
				if($def === null) {
					$val = null;
				} else {
					$val = $this->expr($def);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $val;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function whileLoop($econd, $e) {
		$GLOBALS['%s']->push("hscript.Interp::whileLoop");
		$__hx__spos = $GLOBALS['%s']->length;
		$old = $this->declared->length;
		while(true) {
			$tmp = $this->expr($econd);
			if(!(_hx_equal($tmp, true))) {
				break;
			}
			try {
				$this->expr($e);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(($err = $_ex_) instanceof hscript__Interp_Stop){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					switch($err->index) {
					case 0:{
						break 2;
					}break;
					case 1:{}break;
					case 2:{
						throw new HException($err);
					}break;
					}
				} else throw $__hx__e;;
			}
			unset($tmp,$err);
		}
		$this->restore($old);
		$GLOBALS['%s']->pop();
	}
	public function makeIterator($v) {
		$GLOBALS['%s']->push("hscript.Interp::makeIterator");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$v = $v->iterator();
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
			}
		}
		$tmp = null;
		if(_hx_field($v, "hasNext") !== null) {
			$tmp = _hx_field($v, "next") === null;
		} else {
			$tmp = true;
		}
		if($tmp) {
			$e1 = hscript_Error::EInvalidIterator($v);
			throw new HException($e1);
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function forLoop($n, $it, $e) {
		$GLOBALS['%s']->push("hscript.Interp::forLoop");
		$__hx__spos = $GLOBALS['%s']->length;
		$old = $this->declared->length;
		$this->declared->push(_hx_anonymous(array("n" => $n, "old" => $this->locals->get($n))));
		$tmp = $this->expr($it);
		$it1 = $this->makeIterator($tmp);
		while(true) {
			$tmp1 = !$it1->hasNext();
			if($tmp1) {
				break;
			}
			{
				$tmp2 = $it1->next();
				$this->locals->set($n, _hx_anonymous(array("r" => $tmp2)));
				unset($tmp2);
			}
			try {
				$this->expr($e);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(($err = $_ex_) instanceof hscript__Interp_Stop){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					switch($err->index) {
					case 0:{
						break 2;
					}break;
					case 1:{}break;
					case 2:{
						throw new HException($err);
					}break;
					}
				} else throw $__hx__e;;
			}
			unset($tmp1,$err);
		}
		$this->restore($old);
		$GLOBALS['%s']->pop();
	}
	public function get($o, $f) {
		$GLOBALS['%s']->push("hscript.Interp::get");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o === null) {
			$e = hscript_Error::EInvalidAccess($f);
			throw new HException($e);
		}
		try {
			{
				$tmp = Reflect::getProperty($o, $f);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e1 = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$tmp = Reflect::field($o, $f);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function set($o, $f, $v) {
		$GLOBALS['%s']->push("hscript.Interp::set");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o === null) {
			$e = hscript_Error::EInvalidAccess($f);
			throw new HException($e);
		}
		Reflect::setProperty($o, $f, $v);
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function fcall($o, $f, $args) {
		$GLOBALS['%s']->push("hscript.Interp::fcall");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $this->get($o, $f);
		{
			$tmp2 = $this->call($o, $tmp, $args);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function call($o, $f, $args) {
		$GLOBALS['%s']->push("hscript.Interp::call");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Reflect::callMethod($o, $f, $args);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function cnew($cl, $args) {
		$GLOBALS['%s']->push("hscript.Interp::cnew");
		$__hx__spos = $GLOBALS['%s']->length;
		$c = Type::resolveClass($cl);
		if($c === null) {
			$c = $this->resolve($cl);
		}
		{
			$tmp = Type::createInstance($c, $args);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'hscript.Interp'; }
}
function hscript_Interp_0($e) {
	{
		$GLOBALS['%s']->push("hscript.Interp::new@66");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = Std::string($e);
		haxe_Log::trace($tmp, _hx_anonymous(array("fileName" => "hscript", "lineNumber" => 0)));
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_1(&$me, $e1, $e2) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@77");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $me->expr($e1);
		$tmp1 = $me->expr($e2);
		{
			$tmp2 = _hx_add($tmp, $tmp1);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_2(&$me, $e11, $e21) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@78");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp2 = $me->expr($e11);
		$tmp3 = $me->expr($e21);
		{
			$tmp = $tmp2 - $tmp3;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_3(&$me, $e12, $e22) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@79");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp4 = $me->expr($e12);
		$tmp5 = $me->expr($e22);
		{
			$tmp = $tmp4 * $tmp5;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_4(&$me, $e13, $e23) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@80");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp6 = $me->expr($e13);
		$tmp7 = $me->expr($e23);
		{
			$tmp = $tmp6 / $tmp7;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_5(&$me, $e14, $e24) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@81");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp8 = $me->expr($e14);
		$tmp9 = $me->expr($e24);
		{
			$tmp = _hx_mod($tmp8, $tmp9);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_6(&$me, $e15, $e25) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@82");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp10 = $me->expr($e15);
		$tmp11 = $me->expr($e25);
		{
			$tmp = $tmp10 & $tmp11;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_7(&$me, $e16, $e26) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@83");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp12 = $me->expr($e16);
		$tmp13 = $me->expr($e26);
		{
			$tmp = $tmp12 | $tmp13;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_8(&$me, $e17, $e27) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@84");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp14 = $me->expr($e17);
		$tmp15 = $me->expr($e27);
		{
			$tmp = $tmp14 ^ $tmp15;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_9(&$me, $e18, $e28) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@85");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp16 = $me->expr($e18);
		$tmp17 = $me->expr($e28);
		{
			$tmp = $tmp16 << $tmp17;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_10(&$me, $e19, $e29) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@86");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp18 = $me->expr($e19);
		$tmp19 = $me->expr($e29);
		{
			$tmp = $tmp18 >> $tmp19;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_11(&$me, $e110, $e210) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@87");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp20 = $me->expr($e110);
		$tmp21 = $me->expr($e210);
		{
			$tmp = _hx_shift_right($tmp20, $tmp21);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_12(&$me, $e111, $e211) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@88");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp22 = $me->expr($e111);
		$tmp23 = $me->expr($e211);
		{
			$tmp = _hx_equal($tmp22, $tmp23);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_13(&$me, $e112, $e212) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@89");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp24 = $me->expr($e112);
		$tmp25 = $me->expr($e212);
		{
			$tmp = !_hx_equal($tmp24, $tmp25);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_14(&$me, $e113, $e213) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@90");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp26 = $me->expr($e113);
		$tmp27 = $me->expr($e213);
		{
			$tmp = $tmp26 >= $tmp27;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_15(&$me, $e114, $e214) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@91");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp28 = $me->expr($e114);
		$tmp29 = $me->expr($e214);
		{
			$tmp = $tmp28 <= $tmp29;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_16(&$me, $e115, $e215) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@92");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp30 = $me->expr($e115);
		$tmp31 = $me->expr($e215);
		{
			$tmp = $tmp30 > $tmp31;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_17(&$me, $e116, $e216) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@93");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp32 = $me->expr($e116);
		$tmp33 = $me->expr($e216);
		{
			$tmp = $tmp32 < $tmp33;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_18(&$me, $e117, $e217) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@94");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp34 = $me->expr($e117);
		if(!_hx_equal($tmp34, true)) {
			$tmp35 = $me->expr($e217);
			{
				$tmp = _hx_equal($tmp35, true);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_19(&$me, $e118, $e218) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@95");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp36 = $me->expr($e118);
		if(_hx_equal($tmp36, true)) {
			$tmp37 = $me->expr($e218);
			{
				$tmp = _hx_equal($tmp37, true);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_20(&$me, $e119, $e219) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@97");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp38 = $me->expr($e119);
		$tmp39 = $me->expr($e219);
		{
			$tmp = new IntIterator($tmp38, $tmp39);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_21($v1, $v2) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@98");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_add($v1, $v2);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_22($v11, $v21) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@99");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v11 - $v21;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_23($v12, $v22) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@100");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v12 * $v22;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_24($v13, $v23) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@101");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v13 / $v23;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_25($v14, $v24) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@102");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_mod($v14, $v24);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_26($v15, $v25) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@103");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v15 & $v25;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_27($v16, $v26) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@104");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v16 | $v26;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_28($v17, $v27) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@105");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v17 ^ $v27;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_29($v18, $v28) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@106");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v18 << $v28;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_30($v19, $v29) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@107");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v19 >> $v29;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_31($v110, $v210) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@108");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_shift_right($v110, $v210);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_32(&$fop, &$me, &$op, $e1, $e2) {
	{
		$GLOBALS['%s']->push("hscript.Interp::assignOp@132");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $me->evalAssignOp($op, $fop, $e1, $e2);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_33(&$_gthis, &$capturedLocals, &$fexpr, &$me, &$minParams, &$name, &$params1, $args1) {
	{
		$GLOBALS['%s']->push("hscript.Interp::expr@359");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp8 = $args1->length !== $params1->length;
		if($tmp8) {
			if($args1->length < $minParams) {
				$str = "Invalid number of parameters. Got " . _hx_string_rec($args1->length, "") . ", required " . _hx_string_rec($minParams, "");
				if($name !== null) {
					$str .= " for function '" . _hx_string_or_null($name) . "'";
				}
				throw new HException($str);
			}
			$args2 = (new _hx_array(array()));
			$extraParams = $args1->length - $minParams;
			$pos = 0;
			{
				$_g3 = 0;
				while($_g3 < $params1->length) {
					$p2 = $params1[$_g3];
					++$_g3;
					$tmp9 = $p2->opt;
					if($tmp9) {
						if($extraParams > 0) {
							$tmp10 = $pos++;
							$tmp11 = $args1[$tmp10];
							$args2->push($tmp11);
							--$extraParams;
							unset($tmp11,$tmp10);
						} else {
							$args2->push(null);
						}
					} else {
						$tmp12 = $pos++;
						$tmp13 = $args1[$tmp12];
						$args2->push($tmp13);
						unset($tmp13,$tmp12);
					}
					unset($tmp9,$p2);
				}
			}
			$args1 = $args2;
		}
		$old1 = $me->locals;
		$depth = $me->depth;
		$me->depth++;
		$me->locals = $me->duplicate($capturedLocals);
		{
			$_g11 = 0;
			$_g4 = $params1->length;
			while($_g11 < $_g4) {
				$i = $_g11++;
				$tmp14 = $args1[$i];
				$me->locals->set(_hx_array_get($params1, $i)->name, _hx_anonymous(array("r" => $tmp14)));
				unset($tmp14,$i);
			}
		}
		$r = null;
		$tmp15 = $_gthis->inTry;
		if($tmp15) {
			try {
				$r = $me->exprReturn($fexpr);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e8 = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$me->locals = $old1;
					$me->depth = $depth;
					throw new HException($e8);
				}
			}
		} else {
			$r = $me->exprReturn($fexpr);
		}
		$me->locals = $old1;
		$me->depth = $depth;
		{
			$GLOBALS['%s']->pop();
			return $r;
		}
		$GLOBALS['%s']->pop();
	}
}
