<?php

// Generated by Haxe 3.3.0
class hscript_Parser {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("hscript.Parser::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->uid = 0;
		$this->line = 1;
		$this->opChars = "+*/-=!><&|^%~";
		$this->identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
		$priorities = (new _hx_array(array((new _hx_array(array("%"))), (new _hx_array(array("*", "/"))), (new _hx_array(array("+", "-"))), (new _hx_array(array("<<", ">>", ">>>"))), (new _hx_array(array("|", "&", "^"))), (new _hx_array(array("==", "!=", ">", "<", ">=", "<="))), (new _hx_array(array("..."))), (new _hx_array(array("&&"))), (new _hx_array(array("||"))), (new _hx_array(array("=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "&=", "^="))))));
		$this->opPriority = new haxe_ds_StringMap();
		$this->opRightAssoc = new haxe_ds_StringMap();
		$this->unops = new haxe_ds_StringMap();
		{
			$_g1 = 0;
			$_g = $priorities->length;
			while($_g1 < $_g) {
				$i = $_g1++;
				{
					$_g2 = 0;
					$_g3 = $priorities[$i];
					while($_g2 < $_g3->length) {
						$x = $_g3[$_g2];
						++$_g2;
						$this->opPriority->set($x, $i);
						if($i === 9) {
							$this->opRightAssoc->set($x, true);
						}
						unset($x);
					}
					unset($_g3,$_g2);
				}
				unset($i);
			}
		}
		{
			$_g4 = 0;
			$_g11 = (new _hx_array(array("!", "++", "--", "-", "~")));
			while($_g4 < $_g11->length) {
				$x1 = $_g11[$_g4];
				++$_g4;
				$tmp = null;
				if($x1 !== "++") {
					$tmp = $x1 === "--";
				} else {
					$tmp = true;
				}
				$this->unops->set($x1, $tmp);
				unset($x1,$tmp);
			}
		}
		$GLOBALS['%s']->pop();
	}}
	public $line;
	public $opChars;
	public $identChars;
	public $opPriority;
	public $opRightAssoc;
	public $unops;
	public $allowJSON;
	public $allowTypes;
	public $input;
	public $char;
	public $ops;
	public $idents;
	public $uid;
	public $tokens;
	public function error($err, $pmin, $pmax) {
		$GLOBALS['%s']->push("hscript.Parser::error");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException($err);
		$GLOBALS['%s']->pop();
	}
	public function invalidChar($c) {
		$GLOBALS['%s']->push("hscript.Parser::invalidChar");
		$__hx__spos = $GLOBALS['%s']->length;
		$err = hscript_Error::EInvalidChar($c);
		throw new HException($err);
		$GLOBALS['%s']->pop();
	}
	public function parseString($s) {
		$GLOBALS['%s']->push("hscript.Parser::parseString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->line = 1;
		$this->uid = 0;
		{
			$tmp = $this->parse(new haxe_io_StringInput($s));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parse($s) {
		$GLOBALS['%s']->push("hscript.Parser::parse");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->tokens = new haxe_ds_GenericStack();
		$this->char = -1;
		$this->input = $s;
		$this->ops = new _hx_array(array());
		$this->idents = new _hx_array(array());
		{
			$_g1 = 0;
			$_g = strlen($this->opChars);
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp = _hx_char_code_at($this->opChars, $i);
				$this->ops[$tmp] = true;
				unset($tmp,$i);
			}
		}
		{
			$_g11 = 0;
			$_g2 = strlen($this->identChars);
			while($_g11 < $_g2) {
				$i1 = $_g11++;
				$tmp1 = _hx_char_code_at($this->identChars, $i1);
				$this->idents[$tmp1] = true;
				unset($tmp1,$i1);
			}
		}
		$a = new _hx_array(array());
		while(true) {
			$tk = $this->token();
			if($tk === hscript_Token::$TEof) {
				break;
			}
			{
				$_this = $this->tokens;
				$_this->head = new haxe_ds_GenericCell($tk, $_this->head);
				unset($_this);
			}
			$tmp2 = $this->parseFullExpr();
			$a->push($tmp2);
			unset($tmp2,$tk);
		}
		$tmp3 = $a->length === 1;
		if($tmp3) {
			$tmp = $a[0];
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$e = hscript_Expr::EBlock($a);
			{
				$GLOBALS['%s']->pop();
				return $e;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function unexpected($tk) {
		$GLOBALS['%s']->push("hscript.Parser::unexpected");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $this->tokenString($tk);
		$err = hscript_Error::EUnexpected($tmp);
		throw new HException($err);
		$GLOBALS['%s']->pop();
	}
	public function push($tk) {
		$GLOBALS['%s']->push("hscript.Parser::push");
		$__hx__spos = $GLOBALS['%s']->length;
		$_this = $this->tokens;
		$_this->head = new haxe_ds_GenericCell($tk, $_this->head);
		$GLOBALS['%s']->pop();
	}
	public function ensure($tk) {
		$GLOBALS['%s']->push("hscript.Parser::ensure");
		$__hx__spos = $GLOBALS['%s']->length;
		$t = $this->token();
		if($t !== $tk) {
			$this->unexpected($t);
		}
		$GLOBALS['%s']->pop();
	}
	public function expr($e) {
		$GLOBALS['%s']->push("hscript.Parser::expr");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $e;
		}
		$GLOBALS['%s']->pop();
	}
	public function pmin($e) {
		$GLOBALS['%s']->push("hscript.Parser::pmin");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return 0;
		}
		$GLOBALS['%s']->pop();
	}
	public function pmax($e) {
		$GLOBALS['%s']->push("hscript.Parser::pmax");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return 0;
		}
		$GLOBALS['%s']->pop();
	}
	public function mk($e, $pmin = null, $pmax = null) {
		$GLOBALS['%s']->push("hscript.Parser::mk");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $e;
		}
		$GLOBALS['%s']->pop();
	}
	public function isBlock($e) {
		$GLOBALS['%s']->push("hscript.Parser::isBlock");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $e->index;
		switch($tmp) {
		case 2:{
			$e1 = _hx_deref($e)->params[2];
			if($e1 !== null) {
				$tmp2 = $this->isBlock($e1);
				$GLOBALS['%s']->pop();
				return $tmp2;
			} else {
				$GLOBALS['%s']->pop();
				return false;
			}
		}break;
		case 4:case 21:case 23:{
			$GLOBALS['%s']->pop();
			return true;
		}break;
		case 6:{
			$tmp2 = $this->isBlock(_hx_deref($e)->params[2]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 7:{
			$e2 = _hx_deref($e)->params[2];
			if(!_hx_deref($e)->params[1]) {
				$tmp2 = $this->isBlock($e2);
				$GLOBALS['%s']->pop();
				return $tmp2;
			} else {
				$GLOBALS['%s']->pop();
				return false;
			}
		}break;
		case 9:{
			$e21 = _hx_deref($e)->params[2];
			$e11 = _hx_deref($e)->params[1];
			if($e21 !== null) {
				$tmp2 = $this->isBlock($e21);
				$GLOBALS['%s']->pop();
				return $tmp2;
			} else {
				$tmp2 = $this->isBlock($e11);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 10:{
			$tmp2 = $this->isBlock(_hx_deref($e)->params[1]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 11:{
			$tmp2 = $this->isBlock(_hx_deref($e)->params[2]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 14:{
			$tmp2 = $this->isBlock(_hx_deref($e)->params[1]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 15:{
			$e3 = _hx_deref($e)->params[0];
			if($e3 !== null) {
				$tmp2 = $this->isBlock($e3);
				$GLOBALS['%s']->pop();
				return $tmp2;
			} else {
				$GLOBALS['%s']->pop();
				return false;
			}
		}break;
		case 20:{
			$tmp2 = $this->isBlock(_hx_deref($e)->params[3]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		default:{
			$GLOBALS['%s']->pop();
			return false;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseFullExpr() {
		$GLOBALS['%s']->push("hscript.Parser::parseFullExpr");
		$__hx__spos = $GLOBALS['%s']->length;
		$e = $this->parseExpr();
		$tk = $this->token();
		$tmp = null;
		if($tk !== hscript_Token::$TSemicolon) {
			$tmp = $tk !== hscript_Token::$TEof;
		} else {
			$tmp = false;
		}
		if($tmp) {
			$tmp1 = $this->isBlock($e);
			if($tmp1) {
				$_this = $this->tokens;
				$_this->head = new haxe_ds_GenericCell($tk, $_this->head);
			} else {
				$this->unexpected($tk);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $e;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseObject($p1) {
		$GLOBALS['%s']->push("hscript.Parser::parseObject");
		$__hx__spos = $GLOBALS['%s']->length;
		$fl = new _hx_array(array());
		while(true) {
			$tk = $this->token();
			$id = null;
			$tmp = $tk->index;
			switch($tmp) {
			case 1:{
				$c = _hx_deref($tk)->params[0];
				{
					$tmp1 = !$this->allowJSON;
					if($tmp1) {
						$this->unexpected($tk);
					}
					$tmp2 = $c->index === 2;
					if($tmp2) {
						$id = _hx_deref($c)->params[0];
					} else {
						$this->unexpected($tk);
					}
				}
			}break;
			case 2:{
				$id = _hx_deref($tk)->params[0];
			}break;
			case 7:{
				break 2;
			}break;
			default:{
				$this->unexpected($tk);
			}break;
			}
			{
				$t = $this->token();
				if($t !== hscript_Token::$TDoubleDot) {
					$this->unexpected($t);
				}
				unset($t);
			}
			$tmp3 = $this->parseExpr();
			$fl->push(_hx_anonymous(array("name" => $id, "e" => $tmp3)));
			$tk = $this->token();
			$tmp4 = $tk->index;
			switch($tmp4) {
			case 7:{
				break 2;
			}break;
			case 9:{}break;
			default:{
				$this->unexpected($tk);
			}break;
			}
			unset($tmp4,$tmp3,$tmp,$tk,$id);
		}
		$e = hscript_Expr::EObject($fl);
		{
			$tmp = $this->parseExprNext($e);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseExpr() {
		$GLOBALS['%s']->push("hscript.Parser::parseExpr");
		$__hx__spos = $GLOBALS['%s']->length;
		$tk = $this->token();
		$tmp = $tk->index;
		switch($tmp) {
		case 1:{
			$e = hscript_Expr::EConst(_hx_deref($tk)->params[0]);
			{
				$tmp2 = $this->parseExprNext($e);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 2:{
			$id = _hx_deref($tk)->params[0];
			$e1 = $this->parseStructure($id);
			if($e1 === null) {
				$e2 = hscript_Expr::EIdent($id);
				$e1 = $e2;
			}
			{
				$tmp2 = $this->parseExprNext($e1);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 3:{
			$op = _hx_deref($tk)->params[0];
			$tmp1 = $this->unops->exists($op);
			if($tmp1) {
				$tmp2 = $this->parseExpr();
				{
					$tmp3 = $this->makeUnop($op, $tmp2);
					$GLOBALS['%s']->pop();
					return $tmp3;
				}
			}
			{
				$tmp2 = $this->unexpected($tk);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 4:{
			$e3 = $this->parseExpr();
			{
				$t = $this->token();
				if($t !== hscript_Token::$TPClose) {
					$this->unexpected($t);
				}
			}
			$e4 = hscript_Expr::EParent($e3);
			{
				$tmp2 = $this->parseExprNext($e4);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 6:{
			$tk = $this->token();
			$tmp3 = $tk->index;
			switch($tmp3) {
			case 1:{
				$c = _hx_deref($tk)->params[0];
				$tmp4 = $this->allowJSON;
				if($tmp4) {
					$tmp5 = $c->index === 2;
					if($tmp5) {
						$tk2 = $this->token();
						{
							$_this = $this->tokens;
							$_this->head = new haxe_ds_GenericCell($tk2, $_this->head);
						}
						{
							$_this1 = $this->tokens;
							$_this1->head = new haxe_ds_GenericCell($tk, $_this1->head);
						}
						$tmp6 = $tk2->index === 14;
						if($tmp6) {
							$tmp7 = $this->parseObject(0);
							{
								$tmp2 = $this->parseExprNext($tmp7);
								$GLOBALS['%s']->pop();
								return $tmp2;
							}
						}
					} else {
						$_this2 = $this->tokens;
						$_this2->head = new haxe_ds_GenericCell($tk, $_this2->head);
					}
				} else {
					$_this3 = $this->tokens;
					$_this3->head = new haxe_ds_GenericCell($tk, $_this3->head);
				}
			}break;
			case 2:{
				$tk21 = $this->token();
				{
					$_this4 = $this->tokens;
					$_this4->head = new haxe_ds_GenericCell($tk21, $_this4->head);
				}
				{
					$_this5 = $this->tokens;
					$_this5->head = new haxe_ds_GenericCell($tk, $_this5->head);
				}
				$tmp8 = $tk21->index === 14;
				if($tmp8) {
					$tmp9 = $this->parseObject(0);
					{
						$tmp2 = $this->parseExprNext($tmp9);
						$GLOBALS['%s']->pop();
						return $tmp2;
					}
				}
			}break;
			case 7:{
				$e5 = hscript_Expr::EObject((new _hx_array(array())));
				{
					$tmp2 = $this->parseExprNext($e5);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}break;
			default:{
				$_this6 = $this->tokens;
				$_this6->head = new haxe_ds_GenericCell($tk, $_this6->head);
			}break;
			}
			$a = new _hx_array(array());
			while(true) {
				$tmp10 = $this->parseFullExpr();
				$a->push($tmp10);
				$tk = $this->token();
				if($tk === hscript_Token::$TBrClose) {
					break;
				}
				{
					$_this7 = $this->tokens;
					$_this7->head = new haxe_ds_GenericCell($tk, $_this7->head);
					unset($_this7);
				}
				unset($tmp10);
			}
			$e6 = hscript_Expr::EBlock($a);
			{
				$GLOBALS['%s']->pop();
				return $e6;
			}
		}break;
		case 11:{
			$a1 = new _hx_array(array());
			$tk = $this->token();
			while($tk !== hscript_Token::$TBkClose) {
				{
					$_this8 = $this->tokens;
					$_this8->head = new haxe_ds_GenericCell($tk, $_this8->head);
					unset($_this8);
				}
				$tmp11 = $this->parseExpr();
				$a1->push($tmp11);
				$tk = $this->token();
				if($tk === hscript_Token::$TComma) {
					$tk = $this->token();
				}
				unset($tmp11);
			}
			$tmp12 = $a1->length === 1;
			if($tmp12) {
				$tmp13 = _hx_array_get($a1, 0)->index;
				switch($tmp13) {
				case 10:case 11:{
					$tmp14 = "__a_" . _hx_string_rec($this->uid++, "");
					$e7 = hscript_Expr::EArrayDecl((new _hx_array(array())));
					$e8 = hscript_Expr::EVar($tmp14, null, $e7);
					$tmp15 = $a1[0];
					$tmp16 = $this->mapCompr($tmp14, $tmp15);
					$e9 = hscript_Expr::EIdent($tmp14);
					$e10 = hscript_Expr::EBlock((new _hx_array(array($e8, $tmp16, $e9))));
					{
						$tmp2 = $this->parseExprNext($e10);
						$GLOBALS['%s']->pop();
						return $tmp2;
					}
				}break;
				default:{}break;
				}
			}
			$e11 = hscript_Expr::EArrayDecl($a1);
			{
				$tmp2 = $this->parseExprNext($e11);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		default:{
			$tmp2 = $this->unexpected($tk);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function mapCompr($tmp, $e) {
		$GLOBALS['%s']->push("hscript.Parser::mapCompr");
		$__hx__spos = $GLOBALS['%s']->length;
		$edef = null;
		$tmp1 = $e->index;
		switch($tmp1) {
		case 3:{
			$tmp2 = $this->mapCompr($tmp, _hx_deref($e)->params[0]);
			$edef = hscript_Expr::EParent($tmp2);
		}break;
		case 4:{
			$tmp3 = _hx_deref($e)->params[0]->length === 1;
			if($tmp3) {
				$e1 = _hx_deref($e)->params[0][0];
				$tmp4 = $this->mapCompr($tmp, $e1);
				$edef = hscript_Expr::EBlock((new _hx_array(array($tmp4))));
			} else {
				$e2 = hscript_Expr::EIdent($tmp);
				$e3 = hscript_Expr::EField($e2, "push");
				$edef = hscript_Expr::ECall($e3, (new _hx_array(array($e))));
			}
		}break;
		case 9:{
			$e21 = _hx_deref($e)->params[2];
			$e11 = _hx_deref($e)->params[1];
			$cond = _hx_deref($e)->params[0];
			if($e21 === null) {
				$tmp5 = $this->mapCompr($tmp, $e11);
				$edef = hscript_Expr::EIf($cond, $tmp5, null);
			} else {
				$e4 = hscript_Expr::EIdent($tmp);
				$e5 = hscript_Expr::EField($e4, "push");
				$edef = hscript_Expr::ECall($e5, (new _hx_array(array($e))));
			}
		}break;
		case 10:{
			$e22 = _hx_deref($e)->params[1];
			$cond1 = _hx_deref($e)->params[0];
			$tmp6 = $this->mapCompr($tmp, $e22);
			$edef = hscript_Expr::EWhile($cond1, $tmp6);
		}break;
		case 11:{
			$e23 = _hx_deref($e)->params[2];
			$it = _hx_deref($e)->params[1];
			$v = _hx_deref($e)->params[0];
			$tmp7 = $this->mapCompr($tmp, $e23);
			$edef = hscript_Expr::EFor($v, $it, $tmp7);
		}break;
		default:{
			$e6 = hscript_Expr::EIdent($tmp);
			$e7 = hscript_Expr::EField($e6, "push");
			$edef = hscript_Expr::ECall($e7, (new _hx_array(array($e))));
		}break;
		}
		{
			$GLOBALS['%s']->pop();
			return $edef;
		}
		$GLOBALS['%s']->pop();
	}
	public function makeUnop($op, $e) {
		$GLOBALS['%s']->push("hscript.Parser::makeUnop");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $e->index;
		switch($tmp) {
		case 6:{
			$e2 = _hx_deref($e)->params[2];
			$e1 = _hx_deref($e)->params[1];
			$bop = _hx_deref($e)->params[0];
			$tmp1 = $this->makeUnop($op, $e1);
			$e3 = hscript_Expr::EBinop($bop, $tmp1, $e2);
			{
				$GLOBALS['%s']->pop();
				return $e3;
			}
		}break;
		case 22:{
			$e31 = _hx_deref($e)->params[2];
			$e21 = _hx_deref($e)->params[1];
			$tmp2 = $this->makeUnop($op, _hx_deref($e)->params[0]);
			$e4 = hscript_Expr::ETernary($tmp2, $e21, $e31);
			{
				$GLOBALS['%s']->pop();
				return $e4;
			}
		}break;
		default:{
			$e5 = hscript_Expr::EUnop($op, true, $e);
			{
				$GLOBALS['%s']->pop();
				return $e5;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function makeBinop($op, $e1, $e) {
		$GLOBALS['%s']->push("hscript.Parser::makeBinop");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $e->index;
		switch($tmp) {
		case 6:{
			$e3 = _hx_deref($e)->params[2];
			$e2 = _hx_deref($e)->params[1];
			$op2 = _hx_deref($e)->params[0];
			$tmp1 = null;
			$tmp2 = $this->opPriority->get($op);
			$tmp3 = $tmp2 <= $this->opPriority->get($op2);
			if($tmp3) {
				$tmp1 = !$this->opRightAssoc->exists($op);
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$tmp4 = $this->makeBinop($op, $e1, $e2);
				$e4 = hscript_Expr::EBinop($op2, $tmp4, $e3);
				{
					$GLOBALS['%s']->pop();
					return $e4;
				}
			} else {
				$e5 = hscript_Expr::EBinop($op, $e1, $e);
				{
					$GLOBALS['%s']->pop();
					return $e5;
				}
			}
		}break;
		case 22:{
			$e41 = _hx_deref($e)->params[2];
			$e31 = _hx_deref($e)->params[1];
			$e21 = _hx_deref($e)->params[0];
			$tmp5 = $this->opRightAssoc->exists($op);
			if($tmp5) {
				$e6 = hscript_Expr::EBinop($op, $e1, $e);
				{
					$GLOBALS['%s']->pop();
					return $e6;
				}
			} else {
				$tmp6 = $this->makeBinop($op, $e1, $e21);
				$e7 = hscript_Expr::ETernary($tmp6, $e31, $e41);
				{
					$GLOBALS['%s']->pop();
					return $e7;
				}
			}
		}break;
		default:{
			$e8 = hscript_Expr::EBinop($op, $e1, $e);
			{
				$GLOBALS['%s']->pop();
				return $e8;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseStructure($id) {
		$GLOBALS['%s']->push("hscript.Parser::parseStructure");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($id) {
		case "break":{
			$tmp = hscript_Expr::$EBreak;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case "continue":{
			$tmp = hscript_Expr::$EContinue;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case "else":{
			$tmp = hscript_Token::TId($id);
			{
				$tmp2 = $this->unexpected($tmp);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case "for":{
			{
				$t = $this->token();
				if($t !== hscript_Token::$TPOpen) {
					$this->unexpected($t);
				}
			}
			$tk = $this->token();
			$vname = null;
			$tmp1 = $tk->index === 2;
			if($tmp1) {
				$vname = _hx_deref($tk)->params[0];
			} else {
				$this->unexpected($tk);
			}
			$tk = $this->token();
			$tmp2 = hscript_Token::TId("in");
			$tmp3 = !Type::enumEq($tk, $tmp2);
			if($tmp3) {
				$this->unexpected($tk);
			}
			$eiter = $this->parseExpr();
			{
				$t1 = $this->token();
				if($t1 !== hscript_Token::$TPClose) {
					$this->unexpected($t1);
				}
			}
			$e = $this->parseExpr();
			$e1 = hscript_Expr::EFor($vname, $eiter, $e);
			{
				$GLOBALS['%s']->pop();
				return $e1;
			}
		}break;
		case "function":{
			$tk1 = $this->token();
			$name = null;
			$tmp4 = $tk1->index === 2;
			if($tmp4) {
				$name = _hx_deref($tk1)->params[0];
			} else {
				$_this = $this->tokens;
				$_this->head = new haxe_ds_GenericCell($tk1, $_this->head);
			}
			{
				$t2 = $this->token();
				if($t2 !== hscript_Token::$TPOpen) {
					$this->unexpected($t2);
				}
			}
			$args = new _hx_array(array());
			$tk1 = $this->token();
			if($tk1 !== hscript_Token::$TPClose) {
				$done = false;
				while(!$done) {
					$name1 = null;
					$opt = false;
					$tmp5 = $tk1->index === 13;
					if($tmp5) {
						$opt = true;
						$tk1 = $this->token();
					}
					$tmp6 = $tk1->index === 2;
					if($tmp6) {
						$name1 = _hx_deref($tk1)->params[0];
					} else {
						$this->unexpected($tk1);
					}
					$tk1 = $this->token();
					$arg = _hx_anonymous(array("name" => $name1));
					$args->push($arg);
					if($opt) {
						$arg->opt = true;
					}
					$tmp7 = null;
					if($tk1 === hscript_Token::$TDoubleDot) {
						$tmp7 = $this->allowTypes;
					} else {
						$tmp7 = false;
					}
					if($tmp7) {
						$arg->t = $this->parseType();
						$tk1 = $this->token();
					}
					$tmp8 = $tk1->index;
					switch($tmp8) {
					case 5:{
						$done = true;
					}break;
					case 9:{
						$tk1 = $this->token();
					}break;
					default:{
						$this->unexpected($tk1);
					}break;
					}
					unset($tmp8,$tmp7,$tmp6,$tmp5,$opt,$name1,$arg);
				}
			}
			$ret = null;
			$tmp9 = $this->allowTypes;
			if($tmp9) {
				$tk1 = $this->token();
				if($tk1 !== hscript_Token::$TDoubleDot) {
					$_this1 = $this->tokens;
					$_this1->head = new haxe_ds_GenericCell($tk1, $_this1->head);
				} else {
					$ret = $this->parseType();
				}
			}
			$body = $this->parseExpr();
			$e2 = hscript_Expr::EFunction($args, $body, $name, $ret);
			{
				$GLOBALS['%s']->pop();
				return $e2;
			}
		}break;
		case "if":{
			{
				$t3 = $this->token();
				if($t3 !== hscript_Token::$TPOpen) {
					$this->unexpected($t3);
				}
			}
			$cond = $this->parseExpr();
			{
				$t4 = $this->token();
				if($t4 !== hscript_Token::$TPClose) {
					$this->unexpected($t4);
				}
			}
			$e11 = $this->parseExpr();
			$e21 = null;
			$semic = false;
			$tk2 = $this->token();
			if($tk2 === hscript_Token::$TSemicolon) {
				$semic = true;
				$tk2 = $this->token();
			}
			$tmp10 = hscript_Token::TId("else");
			$tmp11 = Type::enumEq($tk2, $tmp10);
			if($tmp11) {
				$e21 = $this->parseExpr();
			} else {
				{
					$_this2 = $this->tokens;
					$_this2->head = new haxe_ds_GenericCell($tk2, $_this2->head);
				}
				if($semic) {
					$_this3 = $this->tokens;
					$_this3->head = new haxe_ds_GenericCell(hscript_Token::$TSemicolon, $_this3->head);
				}
			}
			$e3 = hscript_Expr::EIf($cond, $e11, $e21);
			{
				$GLOBALS['%s']->pop();
				return $e3;
			}
		}break;
		case "new":{
			$a = new _hx_array(array());
			$tk3 = $this->token();
			$tmp12 = $tk3->index === 2;
			if($tmp12) {
				$a->push(_hx_deref($tk3)->params[0]);
			} else {
				$this->unexpected($tk3);
			}
			$next = true;
			while($next) {
				$tk3 = $this->token();
				$tmp13 = $tk3->index;
				switch($tmp13) {
				case 4:{
					$next = false;
				}break;
				case 8:{
					$tk3 = $this->token();
					$tmp14 = $tk3->index === 2;
					if($tmp14) {
						$a->push(_hx_deref($tk3)->params[0]);
					} else {
						$this->unexpected($tk3);
					}
				}break;
				default:{
					$this->unexpected($tk3);
				}break;
				}
				unset($tmp13);
			}
			$args1 = $this->parseExprList(hscript_Token::$TPClose);
			$tmp15 = $a->join(".");
			$e4 = hscript_Expr::ENew($tmp15, $args1);
			{
				$GLOBALS['%s']->pop();
				return $e4;
			}
		}break;
		case "return":{
			$tk4 = $this->token();
			{
				$_this4 = $this->tokens;
				$_this4->head = new haxe_ds_GenericCell($tk4, $_this4->head);
			}
			$e5 = null;
			if($tk4 === hscript_Token::$TSemicolon) {
				$e5 = null;
			} else {
				$e5 = $this->parseExpr();
			}
			$e6 = hscript_Expr::EReturn($e5);
			{
				$GLOBALS['%s']->pop();
				return $e6;
			}
		}break;
		case "switch":{
			$e7 = $this->parseExpr();
			$def = null;
			$cases = (new _hx_array(array()));
			{
				$t5 = $this->token();
				if($t5 !== hscript_Token::$TBrOpen) {
					$this->unexpected($t5);
				}
			}
			while(true) {
				$tk5 = $this->token();
				$tmp16 = $tk5->index;
				switch($tmp16) {
				case 2:{
					switch(_hx_deref($tk5)->params[0]) {
					case "case":{
						$c = _hx_anonymous(array("values" => (new _hx_array(array())), "expr" => null));
						$cases->push($c);
						while(true) {
							$e8 = $this->parseExpr();
							$c->values->push($e8);
							$tk5 = $this->token();
							$tmp17 = $tk5->index;
							switch($tmp17) {
							case 9:{}break;
							case 14:{
								break 2;
							}break;
							default:{
								$this->unexpected($tk5);
							}break;
							}
							unset($tmp17,$e8);
						}
						$exprs = (new _hx_array(array()));
						while(true) {
							$tk5 = $this->token();
							{
								$_this5 = $this->tokens;
								$_this5->head = new haxe_ds_GenericCell($tk5, $_this5->head);
								unset($_this5);
							}
							$tmp18 = $tk5->index;
							switch($tmp18) {
							case 2:{
								switch(_hx_deref($tk5)->params[0]) {
								case "case":case "default":{
									break 3;
								}break;
								default:{
									$tmp19 = $this->parseFullExpr();
									$exprs->push($tmp19);
								}break;
								}
							}break;
							case 7:{
								break 2;
							}break;
							default:{
								$tmp20 = $this->parseFullExpr();
								$exprs->push($tmp20);
							}break;
							}
							unset($tmp18);
						}
						$tmp21 = null;
						$tmp22 = $exprs->length === 1;
						if($tmp22) {
							$tmp21 = $exprs[0];
						} else {
							$tmp23 = $exprs->length === 0;
							if($tmp23) {
								$e9 = hscript_Expr::EBlock((new _hx_array(array())));
								$tmp21 = $e9;
							} else {
								$e10 = hscript_Expr::EBlock($exprs);
								$tmp21 = $e10;
							}
						}
						$c->expr = $tmp21;
					}break;
					case "default":{
						if($def !== null) {
							$this->unexpected($tk5);
						}
						{
							$t6 = $this->token();
							if($t6 !== hscript_Token::$TDoubleDot) {
								$this->unexpected($t6);
							}
						}
						$exprs1 = (new _hx_array(array()));
						while(true) {
							$tk5 = $this->token();
							{
								$_this6 = $this->tokens;
								$_this6->head = new haxe_ds_GenericCell($tk5, $_this6->head);
								unset($_this6);
							}
							$tmp24 = $tk5->index;
							switch($tmp24) {
							case 2:{
								switch(_hx_deref($tk5)->params[0]) {
								case "case":case "default":{
									break 3;
								}break;
								default:{
									$tmp25 = $this->parseFullExpr();
									$exprs1->push($tmp25);
								}break;
								}
							}break;
							case 7:{
								break 2;
							}break;
							default:{
								$tmp26 = $this->parseFullExpr();
								$exprs1->push($tmp26);
							}break;
							}
							unset($tmp24);
						}
						$tmp27 = $exprs1->length === 1;
						if($tmp27) {
							$def = $exprs1[0];
						} else {
							$tmp28 = $exprs1->length === 0;
							if($tmp28) {
								$e12 = hscript_Expr::EBlock((new _hx_array(array())));
								$def = $e12;
							} else {
								$e13 = hscript_Expr::EBlock($exprs1);
								$def = $e13;
							}
						}
					}break;
					default:{
						$this->unexpected($tk5);
					}break;
					}
				}break;
				case 7:{
					break 2;
				}break;
				default:{
					$this->unexpected($tk5);
				}break;
				}
				unset($tmp16,$tk5);
			}
			$e14 = hscript_Expr::ESwitch($e7, $cases, $def);
			{
				$GLOBALS['%s']->pop();
				return $e14;
			}
		}break;
		case "throw":{
			$e15 = $this->parseExpr();
			$e16 = hscript_Expr::EThrow($e15);
			{
				$GLOBALS['%s']->pop();
				return $e16;
			}
		}break;
		case "try":{
			$e17 = $this->parseExpr();
			$tk6 = $this->token();
			$tmp29 = hscript_Token::TId("catch");
			$tmp30 = !Type::enumEq($tk6, $tmp29);
			if($tmp30) {
				$this->unexpected($tk6);
			}
			{
				$t7 = $this->token();
				if($t7 !== hscript_Token::$TPOpen) {
					$this->unexpected($t7);
				}
			}
			$tk6 = $this->token();
			$vname1 = null;
			$tmp31 = $tk6->index === 2;
			if($tmp31) {
				$vname1 = _hx_deref($tk6)->params[0];
			} else {
				$vname1 = $this->unexpected($tk6);
			}
			{
				$t8 = $this->token();
				if($t8 !== hscript_Token::$TDoubleDot) {
					$this->unexpected($t8);
				}
			}
			$t9 = null;
			$tmp32 = $this->allowTypes;
			if($tmp32) {
				$t9 = $this->parseType();
			} else {
				$tk6 = $this->token();
				$tmp33 = hscript_Token::TId("Dynamic");
				$tmp34 = !Type::enumEq($tk6, $tmp33);
				if($tmp34) {
					$this->unexpected($tk6);
				}
			}
			{
				$t10 = $this->token();
				if($t10 !== hscript_Token::$TPClose) {
					$this->unexpected($t10);
				}
			}
			$ec = $this->parseExpr();
			$e18 = hscript_Expr::ETry($e17, $vname1, $t9, $ec);
			{
				$GLOBALS['%s']->pop();
				return $e18;
			}
		}break;
		case "var":{
			$tk7 = $this->token();
			$ident = null;
			$tmp35 = $tk7->index === 2;
			if($tmp35) {
				$ident = _hx_deref($tk7)->params[0];
			} else {
				$this->unexpected($tk7);
			}
			$tk7 = $this->token();
			$t11 = null;
			$tmp36 = null;
			if($tk7 === hscript_Token::$TDoubleDot) {
				$tmp36 = $this->allowTypes;
			} else {
				$tmp36 = false;
			}
			if($tmp36) {
				$t11 = $this->parseType();
				$tk7 = $this->token();
			}
			$e19 = null;
			$tmp37 = hscript_Token::TOp("=");
			$tmp38 = Type::enumEq($tk7, $tmp37);
			if($tmp38) {
				$e19 = $this->parseExpr();
			} else {
				$_this7 = $this->tokens;
				$_this7->head = new haxe_ds_GenericCell($tk7, $_this7->head);
			}
			$e20 = hscript_Expr::EVar($ident, $t11, $e19);
			{
				$GLOBALS['%s']->pop();
				return $e20;
			}
		}break;
		case "while":{
			$econd = $this->parseExpr();
			$e22 = $this->parseExpr();
			$e23 = hscript_Expr::EWhile($econd, $e22);
			{
				$GLOBALS['%s']->pop();
				return $e23;
			}
		}break;
		default:{
			$GLOBALS['%s']->pop();
			return null;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseExprNext($e1) {
		$GLOBALS['%s']->push("hscript.Parser::parseExprNext");
		$__hx__spos = $GLOBALS['%s']->length;
		$tk = $this->token();
		$tmp = $tk->index;
		switch($tmp) {
		case 3:{
			$op = _hx_deref($tk)->params[0];
			$tmp1 = $this->unops->get($op);
			if($tmp1) {
				$tmp2 = null;
				$tmp3 = !$this->isBlock($e1);
				if($tmp3) {
					if($e1->index === 3) {
						$tmp2 = true;
					} else {
						$tmp2 = false;
					}
				} else {
					$tmp2 = true;
				}
				if($tmp2) {
					{
						$_this = $this->tokens;
						$_this->head = new haxe_ds_GenericCell($tk, $_this->head);
					}
					{
						$GLOBALS['%s']->pop();
						return $e1;
					}
				}
				$e = hscript_Expr::EUnop($op, false, $e1);
				{
					$tmp4 = $this->parseExprNext($e);
					$GLOBALS['%s']->pop();
					return $tmp4;
				}
			}
			$tmp4 = $this->parseExpr();
			{
				$tmp2 = $this->makeBinop($op, $e1, $tmp4);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 4:{
			$tmp5 = $this->parseExprList(hscript_Token::$TPClose);
			$e2 = hscript_Expr::ECall($e1, $tmp5);
			{
				$tmp2 = $this->parseExprNext($e2);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 8:{
			$tk = $this->token();
			$field = null;
			$tmp6 = $tk->index === 2;
			if($tmp6) {
				$field = _hx_deref($tk)->params[0];
			} else {
				$this->unexpected($tk);
			}
			$e3 = hscript_Expr::EField($e1, $field);
			{
				$tmp2 = $this->parseExprNext($e3);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 11:{
			$e21 = $this->parseExpr();
			{
				$t = $this->token();
				if($t !== hscript_Token::$TBkClose) {
					$this->unexpected($t);
				}
			}
			$e4 = hscript_Expr::EArray($e1, $e21);
			{
				$tmp2 = $this->parseExprNext($e4);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 13:{
			$e22 = $this->parseExpr();
			{
				$t1 = $this->token();
				if($t1 !== hscript_Token::$TDoubleDot) {
					$this->unexpected($t1);
				}
			}
			$e31 = $this->parseExpr();
			$e5 = hscript_Expr::ETernary($e1, $e22, $e31);
			{
				$GLOBALS['%s']->pop();
				return $e5;
			}
		}break;
		default:{
			{
				$_this1 = $this->tokens;
				$_this1->head = new haxe_ds_GenericCell($tk, $_this1->head);
			}
			{
				$GLOBALS['%s']->pop();
				return $e1;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseType() {
		$GLOBALS['%s']->push("hscript.Parser::parseType");
		$__hx__spos = $GLOBALS['%s']->length;
		$t = $this->token();
		$tmp = $t->index;
		switch($tmp) {
		case 2:{
			$path = (new _hx_array(array(_hx_deref($t)->params[0])));
			while(true) {
				$t = $this->token();
				if($t !== hscript_Token::$TDot) {
					break;
				}
				$t = $this->token();
				$tmp1 = $t->index === 2;
				if($tmp1) {
					$path->push(_hx_deref($t)->params[0]);
				} else {
					$this->unexpected($t);
				}
				unset($tmp1);
			}
			$params = null;
			$tmp2 = $t->index === 3;
			if($tmp2) {
				if(_hx_deref($t)->params[0] === "<") {
					$params = (new _hx_array(array()));
					while(true) {
						$tmp3 = $this->parseType();
						$params->push($tmp3);
						$t = $this->token();
						$tmp4 = $t->index;
						switch($tmp4) {
						case 3:{
							$op = _hx_deref($t)->params[0];
							{
								if($op === ">") {
									break 2;
								}
								$tmp5 = _hx_char_code_at($op, 0);
								if($tmp5 === 62) {
									{
										$_this = $this->tokens;
										$tmp6 = _hx_substr($op, 1, null);
										$item = hscript_Token::TOp($tmp6);
										$_this->head = new haxe_ds_GenericCell($item, $_this->head);
									}
									break 2;
								}
							}
						}break;
						case 9:{
							continue 2;
						}break;
						default:{}break;
						}
						$this->unexpected($t);
						unset($tmp4,$tmp3);
					}
				} else {
					$_this1 = $this->tokens;
					$_this1->head = new haxe_ds_GenericCell($t, $_this1->head);
				}
			} else {
				$_this2 = $this->tokens;
				$_this2->head = new haxe_ds_GenericCell($t, $_this2->head);
			}
			$tmp7 = hscript_CType::CTPath($path, $params);
			{
				$tmp3 = $this->parseTypeNext($tmp7);
				$GLOBALS['%s']->pop();
				return $tmp3;
			}
		}break;
		case 4:{
			$t1 = $this->parseType();
			{
				$t2 = $this->token();
				if($t2 !== hscript_Token::$TPClose) {
					$this->unexpected($t2);
				}
			}
			$tmp8 = hscript_CType::CTParent($t1);
			{
				$tmp2 = $this->parseTypeNext($tmp8);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 6:{
			$fields = (new _hx_array(array()));
			while(true) {
				$t = $this->token();
				$tmp9 = $t->index;
				switch($tmp9) {
				case 2:{
					{
						$t3 = $this->token();
						if($t3 !== hscript_Token::$TDoubleDot) {
							$this->unexpected($t3);
						}
					}
					$tmp10 = $this->parseType();
					$fields->push(_hx_anonymous(array("name" => _hx_deref($t)->params[0], "t" => $tmp10)));
					$t = $this->token();
					$tmp11 = $t->index;
					switch($tmp11) {
					case 7:{
						break 3;
					}break;
					case 9:{}break;
					default:{
						$this->unexpected($t);
					}break;
					}
				}break;
				case 7:{
					break 2;
				}break;
				default:{
					$this->unexpected($t);
				}break;
				}
				unset($tmp9);
			}
			$tmp12 = hscript_CType::CTAnon($fields);
			{
				$tmp2 = $this->parseTypeNext($tmp12);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		default:{
			$tmp2 = $this->unexpected($t);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseTypeNext($t) {
		$GLOBALS['%s']->push("hscript.Parser::parseTypeNext");
		$__hx__spos = $GLOBALS['%s']->length;
		$tk = $this->token();
		$tmp = $tk->index === 3;
		if($tmp) {
			if(_hx_deref($tk)->params[0] !== "->") {
				{
					$_this = $this->tokens;
					$_this->head = new haxe_ds_GenericCell($tk, $_this->head);
				}
				{
					$GLOBALS['%s']->pop();
					return $t;
				}
			}
		} else {
			{
				$_this1 = $this->tokens;
				$_this1->head = new haxe_ds_GenericCell($tk, $_this1->head);
			}
			{
				$GLOBALS['%s']->pop();
				return $t;
			}
		}
		$t2 = $this->parseType();
		$tmp1 = $t2->index === 1;
		if($tmp1) {
			_hx_deref($t2)->params[0]->unshift($t);
			{
				$GLOBALS['%s']->pop();
				return $t2;
			}
		} else {
			$tmp2 = hscript_CType::CTFun((new _hx_array(array($t))), $t2);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseExprList($etk) {
		$GLOBALS['%s']->push("hscript.Parser::parseExprList");
		$__hx__spos = $GLOBALS['%s']->length;
		$args = new _hx_array(array());
		$tk = $this->token();
		if($tk === $etk) {
			$GLOBALS['%s']->pop();
			return $args;
		}
		{
			$_this = $this->tokens;
			$_this->head = new haxe_ds_GenericCell($tk, $_this->head);
		}
		while(true) {
			$tmp = $this->parseExpr();
			$args->push($tmp);
			$tk = $this->token();
			$tmp1 = $tk->index === 9;
			if(!$tmp1) {
				if($tk === $etk) {
					break;
				}
				$this->unexpected($tk);
			}
			unset($tmp1,$tmp);
		}
		{
			$GLOBALS['%s']->pop();
			return $args;
		}
		$GLOBALS['%s']->pop();
	}
	public function incPos() {
		$GLOBALS['%s']->push("hscript.Parser::incPos");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function readChar() {
		$GLOBALS['%s']->push("hscript.Parser::readChar");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			{
				$tmp = $this->input->readByte();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$GLOBALS['%s']->pop();
					return 0;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function readString($until) {
		$GLOBALS['%s']->push("hscript.Parser::readString");
		$__hx__spos = $GLOBALS['%s']->length;
		$c = 0;
		$b = new haxe_io_BytesOutput();
		$esc = false;
		$old = $this->line;
		$s = $this->input;
		while(true) {
			try {
				$c = $s->readByte();
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$this->line = $old;
					throw new HException(hscript_Error::$EUnterminatedString);
				}
			}
			if($esc) {
				$esc = false;
				switch($c) {
				case 34:case 39:case 92:{
					$b->writeByte($c);
				}break;
				case 47:{
					$tmp = $this->allowJSON;
					if($tmp) {
						$b->writeByte($c);
					} else {
						$this->invalidChar($c);
					}
				}break;
				case 110:{
					$b->writeByte(10);
				}break;
				case 114:{
					$b->writeByte(13);
				}break;
				case 116:{
					$b->writeByte(9);
				}break;
				case 117:{
					$tmp1 = !$this->allowJSON;
					if($tmp1) {
						$this->invalidChar($c);
					}
					$code = null;
					try {
						$code = $s->readString(4);
					}catch(Exception $__hx__e) {
						$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
						$e1 = $_ex_;
						{
							$GLOBALS['%e'] = (new _hx_array(array()));
							while($GLOBALS['%s']->length >= $__hx__spos) {
								$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
							}
							$GLOBALS['%s']->push($GLOBALS['%e'][0]);
							$this->line = $old;
							throw new HException(hscript_Error::$EUnterminatedString);
						}
					}
					$k = 0;
					{
						$_g = 0;
						while($_g < 4) {
							$i = $_g++;
							$k <<= 4;
							$char = _hx_char_code_at($code, $i);
							if($char === null) {
								$this->invalidChar($char);
							} else {
								switch($char) {
								case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
									$k += $char - 48;
								}break;
								case 65:case 66:case 67:case 68:case 69:case 70:{
									$k += $char - 55;
								}break;
								case 97:case 98:case 99:case 100:case 101:case 102:{
									$k += $char - 87;
								}break;
								default:{
									$this->invalidChar($char);
								}break;
								}
							}
							unset($i,$char);
						}
					}
					if($k <= 127) {
						$b->writeByte($k);
					} else {
						if($k <= 2047) {
							$b->writeByte(192 | $k >> 6);
							$b->writeByte(128 | $k & 63);
						} else {
							$b->writeByte(224 | $k >> 12);
							$b->writeByte(128 | $k >> 6 & 63);
							$b->writeByte(128 | $k & 63);
						}
					}
				}break;
				default:{
					$this->invalidChar($c);
				}break;
				}
			} else {
				if($c === 92) {
					$esc = true;
				} else {
					if($c === $until) {
						break;
					} else {
						if($c === 10) {
							$this->line++;
						}
						$b->writeByte($c);
					}
				}
			}
			unset($e);
		}
		{
			$tmp = $b->getBytes()->toString();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function token() {
		$GLOBALS['%s']->push("hscript.Parser::token");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->tokens->head !== null) {
			$_this = $this->tokens;
			$k = $_this->head;
			if($k === null) {
				$GLOBALS['%s']->pop();
				return null;
			} else {
				$_this->head = $k->next;
				{
					$tmp = $k->elt;
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$char = null;
		$tmp = $this->char < 0;
		if($tmp) {
			$char = $this->readChar();
		} else {
			$char = $this->char;
			$this->char = -1;
		}
		while(true) {
			switch($char) {
			case 0:{
				$tmp2 = hscript_Token::$TEof;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 10:{
				$this->line++;
			}break;
			case 9:case 13:case 32:{}break;
			case 34:{
				$tmp1 = $this->readString(34);
				$tmp2 = hscript_Const::CString($tmp1);
				{
					$tmp3 = hscript_Token::TConst($tmp2);
					$GLOBALS['%s']->pop();
					return $tmp3;
				}
			}break;
			case 39:{
				$tmp3 = $this->readString(39);
				$tmp4 = hscript_Const::CString($tmp3);
				{
					$tmp2 = hscript_Token::TConst($tmp4);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}break;
			case 40:{
				$tmp2 = hscript_Token::$TPOpen;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 41:{
				$tmp2 = hscript_Token::$TPClose;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 44:{
				$tmp2 = hscript_Token::$TComma;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 46:{
				$char = $this->readChar();
				switch($char) {
				case 46:{
					$char = $this->readChar();
					if($char !== 46) {
						$this->invalidChar($char);
					}
					{
						$tmp2 = hscript_Token::TOp("...");
						$GLOBALS['%s']->pop();
						return $tmp2;
					}
				}break;
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
					$n = $char - 48;
					$exp = 1;
					while(true) {
						$char = $this->readChar();
						$exp *= 10;
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
							$tmp5 = $n * 10;
							$n = $tmp5 + ($char - 48);
						}break;
						default:{
							$this->char = $char;
							$tmp6 = hscript_Const::CFloat($n / $exp);
							{
								$tmp2 = hscript_Token::TConst($tmp6);
								$GLOBALS['%s']->pop();
								return $tmp2;
							}
						}break;
						}
					}
				}break;
				default:{
					$this->char = $char;
					{
						$tmp2 = hscript_Token::$TDot;
						$GLOBALS['%s']->pop();
						return $tmp2;
					}
				}break;
				}
			}break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
				$n1 = ($char - 48) * 1.0;
				$exp1 = 0.;
				while(true) {
					$char = $this->readChar();
					$exp1 *= 10;
					switch($char) {
					case 46:{
						if($exp1 > 0) {
							$tmp7 = null;
							if(_hx_equal($exp1, 10)) {
								$tmp8 = $this->readChar();
								$tmp7 = $tmp8 === 46;
							} else {
								$tmp7 = false;
							}
							if($tmp7) {
								{
									$tk = hscript_Token::TOp("...");
									{
										$_this1 = $this->tokens;
										$_this1->head = new haxe_ds_GenericCell($tk, $_this1->head);
									}
								}
								$i = Std::int($n1);
								$tmp9 = null;
								if(_hx_equal($i, $n1)) {
									$tmp9 = hscript_Const::CInt($i);
								} else {
									$tmp9 = hscript_Const::CFloat($n1);
								}
								{
									$tmp2 = hscript_Token::TConst($tmp9);
									$GLOBALS['%s']->pop();
									return $tmp2;
								}
							}
							$this->invalidChar($char);
						}
						$exp1 = 1.;
					}break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
						$tmp10 = $n1 * 10;
						$n1 = $tmp10 + ($char - 48);
					}break;
					case 120:{
						$tmp11 = null;
						if(!($n1 > 0)) {
							$tmp11 = $exp1 > 0;
						} else {
							$tmp11 = true;
						}
						if($tmp11) {
							$this->invalidChar($char);
						}
						$n2 = 0;
						while(true) {
							$char = $this->readChar();
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
								$tmp12 = ($n2 << 4) + $char;
								$n2 = $tmp12 - 48;
							}break;
							case 65:case 66:case 67:case 68:case 69:case 70:{
								$tmp13 = $n2 << 4;
								$n2 = $tmp13 + ($char - 55);
							}break;
							case 97:case 98:case 99:case 100:case 101:case 102:{
								$tmp14 = $n2 << 4;
								$n2 = $tmp14 + ($char - 87);
							}break;
							default:{
								$this->char = $char;
								$tmp15 = hscript_Const::CInt($n2);
								{
									$tmp2 = hscript_Token::TConst($tmp15);
									$GLOBALS['%s']->pop();
									return $tmp2;
								}
							}break;
							}
						}
					}break;
					default:{
						$this->char = $char;
						$i1 = Std::int($n1);
						$tmp16 = null;
						if($exp1 > 0) {
							$tmp16 = hscript_Const::CFloat($n1 * 10 / $exp1);
						} else {
							if(_hx_equal($i1, $n1)) {
								$tmp16 = hscript_Const::CInt($i1);
							} else {
								$tmp16 = hscript_Const::CFloat($n1);
							}
						}
						{
							$tmp2 = hscript_Token::TConst($tmp16);
							$GLOBALS['%s']->pop();
							return $tmp2;
						}
					}break;
					}
				}
			}break;
			case 58:{
				$tmp2 = hscript_Token::$TDoubleDot;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 59:{
				$tmp2 = hscript_Token::$TSemicolon;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 61:{
				$char = $this->readChar();
				if($char === 61) {
					$tmp2 = hscript_Token::TOp("==");
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
				$this->char = $char;
				{
					$tmp2 = hscript_Token::TOp("=");
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}break;
			case 63:{
				$tmp2 = hscript_Token::$TQuestion;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 91:{
				$tmp2 = hscript_Token::$TBkOpen;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 93:{
				$tmp2 = hscript_Token::$TBkClose;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 123:{
				$tmp2 = hscript_Token::$TBrOpen;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			case 125:{
				$tmp2 = hscript_Token::$TBrClose;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}break;
			default:{
				$tmp17 = $this->ops[$char];
				if($tmp17) {
					$op = chr($char);
					$prev = -1;
					while(true) {
						$char = $this->readChar();
						$tmp18 = null;
						if(!(!$this->ops[$char])) {
							$tmp18 = $prev === 61;
						} else {
							$tmp18 = true;
						}
						if($tmp18) {
							$tmp19 = _hx_char_code_at($op, 0);
							if($tmp19 === 47) {
								$tmp2 = $this->tokenComment($op, $char);
								$GLOBALS['%s']->pop();
								return $tmp2;
								unset($tmp2);
							}
							$this->char = $char;
							{
								$tmp2 = hscript_Token::TOp($op);
								$GLOBALS['%s']->pop();
								return $tmp2;
								unset($tmp2);
							}
							unset($tmp19);
						}
						$prev = $char;
						$op .= _hx_string_or_null(chr($char));
						unset($tmp18);
					}
				}
				$tmp20 = $this->idents[$char];
				if($tmp20) {
					$id = chr($char);
					while(true) {
						$char = $this->readChar();
						$tmp21 = !$this->idents[$char];
						if($tmp21) {
							$this->char = $char;
							{
								$tmp2 = hscript_Token::TId($id);
								$GLOBALS['%s']->pop();
								return $tmp2;
								unset($tmp2);
							}
						}
						$id .= _hx_string_or_null(chr($char));
						unset($tmp21);
					}
				}
				$this->invalidChar($char);
			}break;
			}
			$char = $this->readChar();
		}
		$GLOBALS['%s']->pop();
	}
	public function tokenComment($op, $char) {
		$GLOBALS['%s']->push("hscript.Parser::tokenComment");
		$__hx__spos = $GLOBALS['%s']->length;
		$c = _hx_char_code_at($op, 1);
		$s = $this->input;
		if($c === 47) {
			try {
				while(true) {
					$tmp = null;
					if($char !== 13) {
						$tmp = $char !== 10;
					} else {
						$tmp = false;
					}
					if(!$tmp) {
						break;
					}
					$char = $s->readByte();
					unset($tmp);
				}
				$this->char = $char;
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				}
			}
			{
				$tmp = $this->token();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}
		if($c === 42) {
			$old = $this->line;
			if($op === "/**/") {
				$this->char = $char;
				{
					$tmp = $this->token();
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
			try {
				while(true) {
					while($char !== 42) {
						if($char === 10) {
							$this->line++;
						}
						$char = $s->readByte();
					}
					$char = $s->readByte();
					if($char === 47) {
						break;
					}
				}
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e1 = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$this->line = $old;
					throw new HException(hscript_Error::$EUnterminatedComment);
				}
			}
			{
				$tmp = $this->token();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}
		$this->char = $char;
		{
			$tmp = hscript_Token::TOp($op);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function constString($c) {
		$GLOBALS['%s']->push("hscript.Parser::constString");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $c->index;
		switch($tmp) {
		case 0:{
			$tmp2 = Std::string(_hx_deref($c)->params[0]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 1:{
			$tmp2 = Std::string(_hx_deref($c)->params[0]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 2:{
			$tmp2 = _hx_deref($c)->params[0];
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function tokenString($t) {
		$GLOBALS['%s']->push("hscript.Parser::tokenString");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $t->index;
		switch($tmp) {
		case 0:{
			$GLOBALS['%s']->pop();
			return "<eof>";
		}break;
		case 1:{
			$tmp2 = $this->constString(_hx_deref($t)->params[0]);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 2:{
			$tmp2 = _hx_deref($t)->params[0];
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 3:{
			$tmp2 = _hx_deref($t)->params[0];
			$GLOBALS['%s']->pop();
			return $tmp2;
		}break;
		case 4:{
			$GLOBALS['%s']->pop();
			return "(";
		}break;
		case 5:{
			$GLOBALS['%s']->pop();
			return ")";
		}break;
		case 6:{
			$GLOBALS['%s']->pop();
			return "{";
		}break;
		case 7:{
			$GLOBALS['%s']->pop();
			return "}";
		}break;
		case 8:{
			$GLOBALS['%s']->pop();
			return ".";
		}break;
		case 9:{
			$GLOBALS['%s']->pop();
			return ",";
		}break;
		case 10:{
			$GLOBALS['%s']->pop();
			return ";";
		}break;
		case 11:{
			$GLOBALS['%s']->pop();
			return "[";
		}break;
		case 12:{
			$GLOBALS['%s']->pop();
			return "]";
		}break;
		case 13:{
			$GLOBALS['%s']->pop();
			return "?";
		}break;
		case 14:{
			$GLOBALS['%s']->pop();
			return ":";
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $p1 = 0;
	static $readPos = 0;
	static $tokenMin = 0;
	static $tokenMax = 0;
	function __toString() { return 'hscript.Parser'; }
}
