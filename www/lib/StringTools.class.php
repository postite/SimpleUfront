<?php

// Generated by Haxe 3.3.0
class StringTools {
	public function __construct(){}
	static function urlEncode($s) {
		$GLOBALS['%s']->push("StringTools::urlEncode");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = rawurlencode($s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function urlDecode($s) {
		$GLOBALS['%s']->push("StringTools::urlDecode");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = urldecode($s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function htmlEscape($s, $quotes = null) {
		$GLOBALS['%s']->push("StringTools::htmlEscape");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = _hx_explode(">", _hx_explode("<", _hx_explode("&", $s)->join("&amp;"))->join("&lt;"))->join("&gt;");
		if($quotes) {
			$tmp = _hx_explode("'", _hx_explode("\"", $s)->join("&quot;"))->join("&#039;");
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return $s;
		}
		$GLOBALS['%s']->pop();
	}
	static function htmlUnescape($s) {
		$GLOBALS['%s']->push("StringTools::htmlUnescape");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = htmlspecialchars_decode($s, ENT_QUOTES);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function startsWith($s, $start) {
		$GLOBALS['%s']->push("StringTools::startsWith");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = strlen($s) >= strlen($start);
		if($tmp) {
			$tmp1 = _hx_substr($s, 0, strlen($start));
			{
				$tmp2 = $tmp1 === $start;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	static function endsWith($s, $end) {
		$GLOBALS['%s']->push("StringTools::endsWith");
		$__hx__spos = $GLOBALS['%s']->length;
		$elen = strlen($end);
		$slen = strlen($s);
		if($slen >= $elen) {
			$tmp = _hx_substr($s, $slen - $elen, $elen);
			{
				$tmp2 = $tmp === $end;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	static function isSpace($s, $pos) {
		$GLOBALS['%s']->push("StringTools::isSpace");
		$__hx__spos = $GLOBALS['%s']->length;
		$c = _hx_char_code_at($s, $pos);
		$tmp = null;
		if($c >= 9) {
			$tmp = $c <= 13;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			$tmp2 = $c === 32;
			$GLOBALS['%s']->pop();
			return $tmp2;
		} else {
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
	static function ltrim($s) {
		$GLOBALS['%s']->push("StringTools::ltrim");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ltrim($s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function rtrim($s) {
		$GLOBALS['%s']->push("StringTools::rtrim");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = rtrim($s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function trim($s) {
		$GLOBALS['%s']->push("StringTools::trim");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = trim($s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function rpad($s, $c, $l) {
		$GLOBALS['%s']->push("StringTools::rpad");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if(strlen($c) !== 0) {
			$tmp = strlen($s) >= $l;
		} else {
			$tmp = true;
		}
		if($tmp) {
			$GLOBALS['%s']->pop();
			return $s;
		} else {
			$tmp2 = str_pad($s, Math::ceil(($l - strlen($s)) / strlen($c)) * strlen($c) + strlen($s), $c, STR_PAD_RIGHT);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function lpad($s, $c, $l) {
		$GLOBALS['%s']->push("StringTools::lpad");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if(strlen($c) !== 0) {
			$tmp = strlen($s) >= $l;
		} else {
			$tmp = true;
		}
		if($tmp) {
			$GLOBALS['%s']->pop();
			return $s;
		} else {
			$tmp2 = str_pad($s, Math::ceil(($l - strlen($s)) / strlen($c)) * strlen($c) + strlen($s), $c, STR_PAD_LEFT);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function replace($s, $sub, $by) {
		$GLOBALS['%s']->push("StringTools::replace");
		$__hx__spos = $GLOBALS['%s']->length;
		if($sub === "") {
			$tmp = implode(str_split ($s), $by);
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$tmp = str_replace($sub, $by, $s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function hex($n, $digits = null) {
		$GLOBALS['%s']->push("StringTools::hex");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = dechex($n);
		$len = 8;
		$tmp = strlen($s);
		$tmp1 = null;
		if(null === $digits) {
			$tmp1 = $len;
		} else {
			$tmp2 = $digits > $len;
			if($tmp2) {
				$len = $digits;
			} else {
				$len = $len;
			}
			$tmp1 = $len;
		}
		if($tmp > $tmp1) {
			$s = _hx_substr($s, -$len, null);
		} else {
			if($digits !== null) {
				$tmp3 = null;
				if(strlen("0") !== 0) {
					$tmp3 = strlen($s) >= $digits;
				} else {
					$tmp3 = true;
				}
				if($tmp3) {
					$s = $s;
				} else {
					$s = str_pad($s, Math::ceil(($digits - strlen($s)) / strlen("0")) * strlen("0") + strlen($s), "0", STR_PAD_LEFT);
				}
			}
		}
		{
			$tmp2 = strtoupper($s);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function fastCodeAt($s, $index) {
		$GLOBALS['%s']->push("StringTools::fastCodeAt");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ord(substr($s,$index,1));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function isEof($c) {
		$GLOBALS['%s']->push("StringTools::isEof");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ($c === 0);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function quoteUnixArg($argument) {
		$GLOBALS['%s']->push("StringTools::quoteUnixArg");
		$__hx__spos = $GLOBALS['%s']->length;
		if($argument === "") {
			$GLOBALS['%s']->pop();
			return "''";
		}
		$tmp = !_hx_deref(new EReg("[^a-zA-Z0-9_@%+=:,./-]", ""))->match($argument);
		if($tmp) {
			$GLOBALS['%s']->pop();
			return $argument;
		}
		$tmp1 = str_replace("'", "'\"'\"'", $argument);
		{
			$tmp2 = "'" . _hx_string_or_null($tmp1) . "'";
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static $winMetaCharacters;
	static function quoteWinArg($argument, $escapeMetaCharacters) {
		$GLOBALS['%s']->push("StringTools::quoteWinArg");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = !_hx_deref(new EReg("^[^ \x09\\\\\"]+\$", ""))->match($argument);
		if($tmp) {
			$result = new StringBuf();
			$needquote = null;
			$tmp1 = null;
			$tmp2 = _hx_index_of($argument, " ", null);
			if($tmp2 === -1) {
				$tmp3 = _hx_index_of($argument, "\x09", null);
				$tmp1 = $tmp3 !== -1;
			} else {
				$tmp1 = true;
			}
			if(!$tmp1) {
				$needquote = $argument === "";
			} else {
				$needquote = true;
			}
			if($needquote) {
				$result->add("\"");
			}
			$bs_buf = new StringBuf();
			{
				$_g1 = 0;
				$_g = strlen($argument);
				while($_g1 < $_g) {
					$i = $_g1++;
					{
						$_g2 = _hx_char_code_at($argument, $i);
						if($_g2 === null) {
							$tmp4 = strlen($bs_buf->b) > 0;
							if($tmp4) {
								$result->add($bs_buf->b);
								$bs_buf = new StringBuf();
							}
							$result->b .= _hx_string_or_null(chr($_g2));
							unset($tmp4);
						} else {
							switch($_g2) {
							case 34:{
								$bs = $bs_buf->b;
								$result->add($bs);
								$result->add($bs);
								$bs_buf = new StringBuf();
								$result->add("\\\"");
							}break;
							case 92:{
								$bs_buf->add("\\");
							}break;
							default:{
								$tmp5 = strlen($bs_buf->b) > 0;
								if($tmp5) {
									$result->add($bs_buf->b);
									$bs_buf = new StringBuf();
								}
								$result->b .= _hx_string_or_null(chr($_g2));
							}break;
							}
						}
						unset($_g2);
					}
					unset($i);
				}
			}
			$result->add($bs_buf->b);
			if($needquote) {
				$result->add($bs_buf->b);
				$result->add("\"");
			}
			$argument = $result->b;
		}
		if($escapeMetaCharacters) {
			$result1 = new StringBuf();
			{
				$_g11 = 0;
				$_g3 = strlen($argument);
				while($_g11 < $_g3) {
					$i1 = $_g11++;
					$c = _hx_char_code_at($argument, $i1);
					$tmp6 = StringTools::$winMetaCharacters->indexOf($c, null);
					if($tmp6 >= 0) {
						$result1->b .= "^";
					}
					$result1->b .= _hx_string_or_null(chr($c));
					unset($tmp6,$i1,$c);
				}
			}
			{
				$tmp2 = $result1->b;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		} else {
			$GLOBALS['%s']->pop();
			return $argument;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'StringTools'; }
}
StringTools::$winMetaCharacters = (new _hx_array(array(32, 40, 41, 37, 33, 94, 34, 60, 62, 38, 124, 10, 13)));
